00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 08/03/2023 15:34:29

00000000                             1  *================================================================================*  
00000000                             2  *================================================================================*
00000000                             3  * Written by : Steve Fasoranti                                                   *
00000000                             4  * Date       : 30/1/2023                                                         *
00000000                             5  * Description: This is an endless runner game called dash where you have to dodge* 
00000000                             6  *               Enemies while they are running towards you                       *
00000000                             7  * Bugs: Fixed a bug where the runner would float to the top of the screen instead*
00000000                             8  *       of being on the ground. Fixed the runner not being able to print to the  *
00000000                             9  *        screen.                                                                 *
00000000                            10  *.----------------.  .----------------.  .----------------.  .----------------.  *
00000000                            11  *| .--------------. || .--------------. || .--------------. || .--------------. |*
00000000                            12  *| |  ________    | || |      __      | || |    _______   | || |  ____  ____  | |*
00000000                            13  *| | |_   ___ `.  | || |     /  \     | || |   /  ___  |  | || | |_   ||   _| | |*
00000000                            14  *| |   | |   `. \ | || |    / /\ \    | || |  |  (__ \_|  | || |   | |__| |   | |*
00000000                            15  *| |   | |    | | | || |   / ____ \   | || |   '.___`-.   | || |   |  __  |   | |*
00000000                            16  *| |  _| |___.' / | || | _/ /    \ \_ | || |  |`\____) |  | || |  _| |  | |_  | |*
00000000                            17  *| | |________.'  | || ||____|  |____|| || |  |_______.'  | || | |____||____| | |*
00000000                            18  *| |              | || |              | || |              | || |              | |*
00000000                            19  *| '--------------' || '--------------' || '--------------' || '--------------' |*
00000000                            20  *'----------------'  '----------------'  '----------------'  '----------------'  *
00000000                            21  *================================================================================*
00000000                            22  *================================================================================*
00000000                            23  *****************************************************///////////////(///////////
00000000                            24  *****************************************************///////////////(///////////
00000000                            25  *///////////////////////////////////////////////******///////////////(///////////
00000000                            26  *///////////////////////////////////*,,,,,,,*//********,,*//////////////////////
00000000                            27  *///*******************************,(%&&&&&&(,******,*#&&%/**///////////////////
00000000                            28  *///*****************************/(#/,,**/#&(,******,*#%(/(#(///////////////////
00000000                            29  *///**************************/((/*,,/(%%&&&(,,**,,,,*#&&%#((/((**//////////////
00000000                            30  **/****************,,,,,,****,/%#,*(#&&&&&&&&%%%%%%%%%&&&&&%**#%**//////////////
00000000                            31  **/***************/#%%%&#/***,/%#//(%&#*******,.......,**/#%/*#%*,*/////////////
00000000                            32  **/************,*#%(*,,*/(((/,/%&%%%%&&%%(((((/*******/((#%&%%&%*,*/////////////
00000000                            33  **/************,*#&%(/*,**(###%&%///#&&%%(((((#########((#%&%%&%*,*///**////////
00000000                            34  ******************/#%/*((*/((#%&&&&&&&&%%(((((*......,/((#%&&&&%*,*///***///////
00000000                            35  *******************,*#%%##(//(#&#*,,(&&%%#####/*******(###%&##%%*,********//////
00000000                            36  *******************/((#%&%%#(/(#%%%%%&&%%%&&#(#%%%%%%#((%&&&%##(************////
00000000                            37  *****************(#/*//***/%%#((##%&&&&%%%&&/.(&&&&&&%*,(&&%(****************///
00000000                            38  ***************,*#&#(****(%&@@@@&%%&&%%%%%&&&&&&&&&&&&&&&&&%/,***************///
00000000                            39  ***************,*(%%#((%%&#(////#&@&&&%%%%&&(,,,*****,,*#&&%/,..,**,     .,***//
00000000                            40  ****************,,*%&%#(((#%%%%%%%&&&&&&&&@@%###%&&%%###&@@&/,,,....  ...,****//
00000000                            41  *,,,,,,,,,,,,,,,,,,*%@%%%%%&@@@@@@@@@&&&&(*******#&&&@@@@@&(**,,,,,,,,,,,******//
00000000                            42  *,,,,,,,,,,,,,,,,,,,,/%@@@@%*,,,,(&&&%%%%(*******(&&&(,,,,,,,,,,,,,,***,,*******,
00000000                            43  *,,,,,,,,,,,,,,,,,,,,,,,,,,,,*/(%&&%%%%(******/#%&&#/*,,,,,,,,,,,,,**********/(%%
00000000                            44  *,,,,,,,,,,,,,,,,,,,,,,,,,,*(#%%%%%%%#(/***/(#%%%##&&(,,,,,,,,,,,,,,,,,,,.*(#%%##
00000000                            45  *,,,,,,,,..............,,/%%##%%%%%&@@&&&&&@@&%%%##&&(,,,,,,,,,,,,,,,,,.*#%%#((((
00000000                            46  *,,,,,,,..............,/%&##%&&&&&&#,,,,,,,,,#@%###%&/,,,,,,,,,,,,,,..*%&%#((((((
00000000                            47  *......................*(######(,............/#####*.............,**/%&%%#####%&&
00000000                            48  *((((((((((((((((((((((((######(((((((((((((((#####((((((((((((((((((((#(((#####%
00000000                            49  
00001000                            50      ORG    $1000
00001000                            51  START:                
00001000                            52  
00001000  =00000020                 53  SPACE_KEY               equ $20
00001000  =0000009C                 54  Gravity                 equ $9C    
00001000  =00000034                 55  PowerUpSquareLength     equ 52
00001000  =00000013                 56  GET_USER_INPUT_COMMAND  equ 19
00001000  =000000A0                 57  RunnerStartSpriteX      equ 160
00001000  =00000081                 58  EnemyStartSpriteX       equ 129
00001000  =00000004                 59  FRAC_BITS               equ 4
00001000  =00000001                 60  POINTS                  equ 01         
00001000                            61  
00001000                            62  
00001000                            63  *------------------------------------------------------------*
00001000                            64  *------------------------------------------------------------*
00001000                            65  *--------------Main Game screen change code------------------*
00001000                            66  *------------------------------------------------------------*
00001000                            67  *------------------------------------------------------------*
00001000  103C 0021                 68          move.b  #(ScreenChangeCode) , d0
00001004  223C 02BC0258             69          move.l  #700*$10000+600, d1
0000100A  4E4F                      70          trap    #15
0000100C                            71          
0000100C                            72  *------------------------------------------------------------*
0000100C                            73  *------------------------------------------------------------*
0000100C                            74  *---------Loading in the loading image using draw image------* 
0000100C                            75  *------------------------------------------------------------*
0000100C                            76  *------------------------------------------------------------*
0000100C  41F9 00134FF0             77          lea     LoadingImage, a0
00001012  223C 000000A0             78          move.l  #160, d1
00001018  243C 000000AA             79          move.l  #170, d2
0000101E  263C 0000010E             80          move.l  #270, d3
00001024  283C 000000FA             81          move.l  #250, d4
0000102A  7A00                      82          move.l  #0, d5
0000102C  7C00                      83          move.l  #0, d6
0000102E  4EB9 002DC1DA             84          jsr     DRAWIMAGE
00001034                            85          
00001034                            86  *------------------------------------------------------------*
00001034                            87  *------------------------------------------------------------*
00001034                            88  *-------------Enable the double buffering--------------------*
00001034                            89  *------------------------------------------------------------*
00001034                            90  *------------------------------------------------------------*
00001034  103C 005C                 91          move.b  #92, d0
00001038  123C 0011                 92          move.b  #17, d1
0000103C  4E4F                      93          trap    #15  
0000103E                            94          
0000103E                            95  *------------------------------------------------------------*
0000103E                            96  *------------------------------------------------------------*
0000103E                            97  *------Load in the title music at memory location 0----------*
0000103E                            98  *------------------------------------------------------------*
0000103E                            99  *------------------------------------------------------------* 
0000103E  43F9 00001546            100          lea     TitleMusic, a1
00001044  123C 0000                101          move.b  #0,d1
00001048  704A                     102          move.l  #74,d0
0000104A  4E4F                     103          Trap    #15
0000104C                           104  
0000104C                           105  
0000104C                           106  *------------------------------------------------------------*
0000104C                           107  *------------------------------------------------------------*
0000104C                           108  *---------Load in the in game music at location 1------------*
0000104C                           109  *------------------------------------------------------------*
0000104C                           110  *------------------------------------------------------------*1      
0000104C  43F9 0000155A            111          lea     RunningMusic, a1
00001052  123C 0001                112          move.b  #1,d1
00001056  704A                     113          move.l  #74,d0
00001058  4E4F                     114          Trap    #15
0000105A                           115  
0000105A                           116  
0000105A                           117  *------------------------------------------------------------*
0000105A                           118  *------------------------------------------------------------*
0000105A                           119  *-----Reseting the varibles for the runner-------------------*
0000105A                           120  *------------------------------------------------------------*
0000105A                           121  *------------------------------------------------------------*
0000105A                           122  ResetVariables
0000105A  23FC 0000000A 000014A4   123          move.l  #10,RunnerX
00001064  23FC 00000226 000014A8   124          move.l  #550, RunnerY
0000106E  23FC 000000A0 000014AC   125          move.l  #160, RunnerChunkX
00001078  23FC 00000000 000014B0   126          move.l  #0, RunnerChunkY
00001082  23FC 0000000A 000014B4   127          move.l  #10, RunnerSpeed
0000108C  23FC 00000000 000014B8   128          move.l  #0, RunnerJumping
00001096  23FC 00000008 000014BC   129          move.l  #8, RunnerHealth
000010A0  23FC 00000000 000014C0   130          move.l  #0, RunnerLeft
000010AA                           131          
000010AA                           132  *------------------------------------------------------------*
000010AA                           133  *------------------------------------------------------------*
000010AA                           134  *-------------Reseting the varibles for the enemy------------*
000010AA                           135  *------------------------------------------------------------*
000010AA                           136  *------------------------------------------------------------*
000010AA  23FC 0000027C 000014E2   137          move.l  #636, EnemyX
000010B4  23FC 0000021C 000014E6   138          move.l  #540, EnemyY
000010BE  23FC 00000081 000014EA   139          move.l  #129, EnemyChunkX
000010C8  23FC 00000000 000014EE   140          move.l  #0, EnemyChunkY
000010D2  23FC 0000000A 000014F2   141          move.l  #10, EnemySpeed
000010DC  23FC 00000001 000014FE   142          move.l  #1, EnemyLeft
000010E6  23FC 00000010 0000151A   143          move.l  #16, EnemyProjectileWidth
000010F0  23FC 0000000C 0000151E   144          move.l  #12, EnemyProjectileHeight
000010FA  23FC 0000000F 0000152A   145          move.l  #15, EnemyProjectileYOffset
00001104  23FC 00000001 00001536   146          move.l  #1, EnemyProjectileDamage
0000110E                           147          
0000110E                           148               
0000110E                           149  *------------------------------------------------------------*
0000110E                           150  *------------------------------------------------------------*
0000110E                           151  *----Draw the Title screen after the loading screen----------*
0000110E                           152  *------------------------------------------------------------*
0000110E                           153  *------------------------------------------------------------*
0000110E  41F9 00148F3A            154          lea     TitleScreen, a0
00001114  223C 000002BC            155          move.l  #700, d1
0000111A  243C 00000258            156          move.l  #600, d2
00001120  7600                     157          move.l  #0, d3
00001122  7800                     158          move.l  #0, d4
00001124  7A00                     159          move.l  #0, d5
00001126  7C00                     160          move.l  #0, d6
00001128  4EB9 002DC1DA            161          jsr     DRAWIMAGE
0000112E                           162          
0000112E                           163  *------------------------------------------------------------*
0000112E                           164  *------------------------------------------------------------*
0000112E                           165  *-------------Enable the double buffering--------------------*
0000112E                           166  *------------------------------------------------------------*
0000112E                           167  *------------------------------------------------------------*
0000112E  103C 005E                168          move.b  #94, d0
00001132  4E4F                     169          trap    #15
00001134                           170          
00001134                           171          
00001134                           172  *-------------------------------------------------------------*
00001134                           173  *-------------------------------------------------------------*
00001134                           174  *------Play music for the title screen only-------------------*
00001134                           175  *-------------------------------------------------------------*
00001134                           176  *-------------------------------------------------------------*          
00001134  123C 0000                177          move.b  #0, d1
00001138  7402                     178          move.l  #2, d2
0000113A  704B                     179          move.l  #75, d0
0000113C  4E4F                     180          trap    #15
0000113E                           181          
0000113E                           182  *------------------------------------------------------------*
0000113E                           183  *------------------------------------------------------------*
0000113E                           184  *------Draw the background of the running scene--------------*
0000113E                           185  *------------------------------------------------------------*
0000113E                           186  *------------------------------------------------------------* 
0000113E  41F9 00001586            187          lea     BackGround, a0
00001144  223C 000002BC            188          move.l  #700, d1
0000114A  243C 00000226            189          move.l  #550, d2
00001150  7600                     190          move.l  #0, d3
00001152  7832                     191          move.l  #50, d4
00001154  7A00                     192          move.l  #0, d5
00001156  7C32                     193          move.l  #50, d6
00001158  4EB9 002DC1DA            194          jsr     DRAWIMAGE
0000115E                           195          
0000115E                           196  *------------------------------------------------------------*
0000115E                           197  *------------------------------------------------------------*
0000115E                           198  *-------------Enable the double buffering--------------------*
0000115E                           199  *------------------------------------------------------------*
0000115E                           200  *------------------------------------------------------------*
0000115E  103C 005E                201          move.b  #94, d0
00001162  4E4F                     202          trap    #15
00001164                           203          
00001164                           204  *------------------------------------------------------------*
00001164                           205  *------------------------------------------------------------*
00001164                           206  *-------------Store the players velocity---------------------*
00001164                           207  *------------------------------------------------------------*
00001164                           208  *------------------------------------------------------------*   
00001164  2039 000014CC            209          move.l  RunnerVelocity, d0
0000116A  E948                     210          lsl     #FRAC_BITS, d0
0000116C  23C0 000014CC            211          move.l  d0, RunnerVelocity
00001172                           212          
00001172                           213  *------------------------------------------------------------*
00001172                           214  *------------------------------------------------------------*
00001172                           215  *---------Store Players postions to the Y coordinate---------*
00001172                           216  *------------------------------------------------------------*
00001172                           217  *------------------------------------------------------------*
00001172  2039 000014A8            218          move.l  RunnerY, d0
00001178  E948                     219          lsl     #FRAC_BITS, d0
0000117A  23C0 000014A8            220          move.l  d0, RunnerY        
00001180  2039 000014E6            221          move.l  EnemyY, d0
00001186  E948                     222          lsl     #FRAC_BITS, d0
00001188  23C0 000014E6            223          move.l  d0, EnemyY
0000118E                           224          
0000118E                           225  *------------------------------------------------------------*
0000118E                           226  *------------------------------------------------------------*
0000118E                           227  *--------------Set a black color-----------------------------*
0000118E                           228  *------------------------------------------------------------*
0000118E                           229  *------------------------------------------------------------*
0000118E  7050                     230          move.l      #80, d0
00001190  7200                     231          move.l      #$00000000, d1
00001192  4E4F                     232          trap        #15
00001194  7051                     233          move.l      #81, d0
00001196  7200                     234          move.l      #$00000000, d1
00001198  4E4F                     235          trap        #15
0000119A                           236          
0000119A                           237  *------------------------------------------------------------*
0000119A                           238  *------------------------------------------------------------*
0000119A                           239  *-----------Draw the black box at the top of the screen------*
0000119A                           240  *------------------------------------------------------------*
0000119A                           241  *------------------------------------------------------------*  
0000119A  323C 0000                242          move.w      #0, d1
0000119E  343C 0000                243          move.w      #0, d2
000011A2  363C 02BC                244          move.w      #700, d3
000011A6  383C 0032                245          move.w      #50, d4
000011AA  7057                     246          move.l      #87, d0
000011AC  4E4F                     247          trap        #15
000011AE                           248          
000011AE                           249  *------------------------------------------------------------*
000011AE                           250  *------------------------------------------------------------*
000011AE                           251  *--------------------Draw Health Bar-------------------------*
000011AE                           252  *------------------------------------------------------------*
000011AE                           253  *------------------------------------------------------------*  
000011AE  4EB9 00001372            254          jsr     DrawRunnerHealth
000011B4                           255  
000011B4                           256  *------------------------------------------------------------*
000011B4                           257  *------------------------------------------------------------*
000011B4                           258  *-------Draw the amount of health the player has-------------*
000011B4                           259  *------------------------------------------------------------*
000011B4                           260  *------------------------------------------------------------* 
000011B4  2039 000014BC            261          move.l  RunnerHealth, d0
000011BA  4EB9 002DC5BE            262          jsr     updateHealth
000011C0  4EB9 0000130A            263          jsr     drawRunnerCall
000011C6                           264       
000011C6                           265          
000011C6                           266  
000011C6                           267  *------------------------------------------------------------*
000011C6                           268  *------------------------------------------------------------*
000011C6                           269  *-----Check and see if the user presses the key to start-----*
000011C6                           270  *------------------------------------------------------------*
000011C6                           271  *------------------------------------------------------------*         
000011C6                           272  TitleLoop
000011C6  103C 0013                273          move.b          #GET_KEY_INPUT_COMMAND,d0
000011CA  7220                     274          move.l          #SPACE_KEY,d1
000011CC  4E4F                     275          TRAP            #15
000011CE  0C81 00000000            276          cmpi.l          #0, d1
000011D4  67F0                     277          BEQ             TitleLoop
000011D6                           278                  
000011D6                           279  *---------------------------------------------------------------------------------------------*
000011D6                           280  *---------------------------------------------------------------------------------------------*
000011D6                           281  *-------Pause the location 0 music  and move onto the location 1 music -----------------------*
000011D6                           282  *---------------------------------------------------------------------------------------------*
000011D6                           283  *---------------------------------------------------------------------------------------------*
000011D6  123C 0000                284          move.b  #0,d1 
000011DA  7402                     285          move.l  #2,d2
000011DC  704D                     286          move.l  #77,d0
000011DE  4E4F                     287          Trap    #15
000011E0                           288          
000011E0  123C 0001                289          move.b  #1, d1
000011E4  7401                     290          move.l  #1, d2
000011E6  704D                     291          move.l  #77, d0
000011E8  4E4F                     292          trap    #15
000011EA                           293          
000011EA                           294  *------------------------------------------------------------*
000011EA                           295  *------------------------------------------------------------*
000011EA                           296  *-------------Enable the double buffering--------------------*
000011EA                           297  *------------------------------------------------------------*
000011EA                           298  *------------------------------------------------------------*        
000011EA  103C 005E                299          move.b  #94, d0
000011EE  4E4F                     300          trap    #15
000011F0                           301  
000011F0                           302  *------------------------------------------------------------*
000011F0                           303  *------------------------------------------------------------*
000011F0                           304  *-------------Inisilise the main game loop-------------------*
000011F0                           305  *------------------------------------------------------------*
000011F0                           306  *------------------------------------------------------------*
000011F0                           307  GAMELOOP:
000011F0  4EB9 00001390            308      jsr     updatePlayersBackgrounds
000011F6  4EB9 002DC252            309      jsr     initRunnerInput
000011FC  4EB9 002DCAA6            310      jsr     updateRunnerGravity
00001202  4EB9 00001302            311      jsr     updateProjectilesBackgrounds
00001208  4EB9 002DC91E            312      jsr     CheckProjectileCollision 
0000120E  4EB9 00001430            313      jsr     drawPlayers
00001214                           314      
00001214                           315  *------------------------------------------------------------*
00001214                           316  *------------------------------------------------------------*
00001214                           317  *-------------Enable the double buffering--------------------*
00001214                           318  *------------------------------------------------------------*
00001214                           319  *------------------------------------------------------------*         
00001214  103C 005E                320      move.b  #94, d0                     
00001218  4E4F                     321      trap    #15
0000121A                           322     
0000121A                           323  
0000121A                           324  *---------------------------------------------------------------------------------------------*
0000121A                           325  *---------------------------------------------------------------------------------------------*
0000121A                           326  *-------------Check and see the players health if its at 0 print GAME OVER--------------------*
0000121A                           327  *---------------------------------------------------------------------------------------------*
0000121A                           328  *---------------------------------------------------------------------------------------------*    
0000121A  2039 000014BC            329      move.l  RunnerHealth, d0
00001220  0C80 00000001            330      cmpi.l  #1, d0
00001226  6D00 003C                331      BLT     GAMEOVER0
0000122A                           332      
0000122A  60C4                     333      bra     GAMELOOP          
0000122C                           334      
0000122C                           335  
0000122C                           336      
0000122C                           337  
0000122C                           338  *------------------------------------------------------------*
0000122C                           339  *------------------------------------------------------------*
0000122C                           340  *-------------Draw where the runners dead pos is ------------*
0000122C                           341  *------------------------------------------------------------*
0000122C                           342  *------------------------------------------------------------*    
0000122C  23FC 0000000A 000014A4   343      move.l  #10, RunnerX
00001236  23FC 0000021C 000014A8   344      move.l  #540, RunnerY
00001240  2039 000014A8            345      move.l  RunnerY, d0
00001246  E988                     346      lsl.l   #4, d0
00001248  23C0 000014A8            347      move.l  d0, RunnerY
0000124E  23FC 000000A0 000014AC   348      move.l  #160, RunnerChunkX
00001258  4EB9 0000130A            349      jsr DrawRunnerCall
0000125E                           350      
0000125E                           351  *------------------------------------------------------------*
0000125E                           352  *------------------------------------------------------------*
0000125E                           353  *-------------Enable the double buffering--------------------*
0000125E                           354  *------------------------------------------------------------*
0000125E                           355  *------------------------------------------------------------*       
0000125E                           356  
0000125E  103C 005E                357      move.b  #94, d0
00001262  4E4F                     358      trap    #15
00001264                           359  
00001264                           360  *-------------------------------------------------------------------------------*
00001264                           361  *-------------------------------------------------------------------------------*
00001264                           362  *-------------Stay on the game loop until user presses SPACE--------------------*
00001264                           363  *-------------------------------------------------------------------------------*
00001264                           364  *-------------------------------------------------------------------------------*     
00001264                           365  GAMEOVER0    
00001264  4EB9 00001390            366      jsr     updatePlayersBackgrounds
0000126A                           367      
0000126A  4EB9 002DC814            368      jsr     updateProjectilesBackground
00001270                           369      
00001270  41F9 0000156A            370      lea     GameOver, a0
00001276  223C 000002BC            371      move.l  #700, d1
0000127C  7464                     372      move.l  #100, d2
0000127E  7600                     373      move.l  #0, d3
00001280  283C 0000012C            374      move.l  #300, d4
00001286  7A00                     375      move.l  #0, d5
00001288  7C00                     376      move.l  #0, d6
0000128A  4EB9 002DC1DA            377      jsr     DRAWIMAGE
00001290                           378      
00001290  23FC 0000027C 000014E2   379      move.l  #636, EnemyX
0000129A  23FC 0000021C 000014E6   380      move.l  #540, EnemyY
000012A4  2039 000014E6            381      move.l  EnemyY, d0
000012AA  E988                     382      lsl.l   #FRAC_BITS, d0
000012AC  23C0 000014E6            383      move.l  d0, EnemyY
000012B2  23FC 00000081 000014EA   384      move.l  #129, EnemyChunkX
000012BC  4EB9 0000133E            385      jsr DrawEnemyCall
000012C2                           386      
000012C2  123C 0001                387      move.b  #1, d1
000012C6  7402                     388      move.l  #2, d2
000012C8  704D                     389      move.l  #77, d0
000012CA  4E4F                     390      trap    #15
000012CC                           391      
000012CC                           392    
000012CC                           393  *------------------------------------------------------------*
000012CC                           394  *------------------------------------------------------------*
000012CC                           395  *-------------Draw the dead runner image---------------------*
000012CC                           396  *------------------------------------------------------------*
000012CC                           397  *------------------------------------------------------------*
000012CC                           398      
000012CC  41F9 002DAF06            399      lea     DeadRunner, a0
000012D2  7232                     400      move.l  #50, d1
000012D4  741E                     401      move.l  #30, d2
000012D6  760A                     402      move.l  #10, d3
000012D8  283C 00000230            403      move.l  #560, d4
000012DE  7A00                     404      move.l  #0, d5
000012E0  7C00                     405      move.l  #0, d6
000012E2  4EB9 002DC1DA            406      jsr     DRAWIMAGE
000012E8                           407      
000012E8                           408  *------------------------------------------------------------*
000012E8                           409  *------------------------------------------------------------*
000012E8                           410  *-------------Enable the double buffering--------------------*
000012E8                           411  *------------------------------------------------------------*
000012E8                           412  *------------------------------------------------------------*     
000012E8  103C 005E                413      move.b  #94, d0
000012EC  4E4F                     414      trap    #15
000012EE                           415  
000012EE                           416  GAMEOVERLOOP
000012EE  103C 0013                417      move.b          #GET_KEY_INPUT_COMMAND,d0
000012F2  7220                     418      move.l          #$20,d1
000012F4  4E4F                     419      TRAP            #15
000012F6  0C81 00000000            420      cmpi.l          #0, d1
000012FC  6600 FD5C                421      BNE             ResetVariables
00001300  60EC                     422      BRA             GAMEOVERLOOP
00001302                           423      
00001302                           424  
00001302                           425  *------------------------------------------------------------*
00001302                           426  *------------------------------------------------------------*
00001302                           427  *-------------Update the projectiles background--------------*
00001302                           428  *------------------------------------------------------------*
00001302                           429  *------------------------------------------------------------* 
00001302                           430  updateProjectilesBackgrounds
00001302  4EB9 002DC814            431      jsr     updateProjectilesBackGround
00001308  4E75                     432      rts
0000130A                           433      
0000130A                           434  *------------------------------------------------------------*
0000130A                           435  *------------------------------------------------------------*
0000130A                           436  *-------------Load in values for runner and enemy------------*
0000130A                           437  *------------------------------------------------------------*
0000130A                           438  *------------------------------------------------------------*
0000130A                           439  DrawRunnerCall
0000130A  41F9 0027C9A4            440      lea     Runner, a0
00001310  2239 0000149C            441      move.l  RunnerWidth, d1
00001316  2439 000014A0            442      move.l  RunnerHeight, d2
0000131C  2639 000014A4            443      move.l  RunnerX, d3
00001322  2839 000014A8            444      move.l  RunnerY, d4 
00001328  E84C                     445      lsr     #4, d4
0000132A  2A39 000014AC            446      move.l  RunnerChunkX, d5
00001330  2C39 000014B0            447      move.l  RunnerChunkY, d6
00001336  4EB9 002DC1DA            448      jsr     DRAWIMAGE
0000133C                           449      
0000133C  4E75                     450      rts   
0000133E                           451  DrawEnemyCall
0000133E  41F9 0028E6DA            452      lea     Enemy, a0
00001344  2239 000014DA            453      move.l  EnemyWidth, d1
0000134A  2439 000014DE            454      move.l  EnemyHeight, d2
00001350  2639 000014E2            455      move.l  EnemyX, d3
00001356  2839 000014E6            456      move.l  EnemyY, d4
0000135C  E84C                     457      lsr     #FRAC_BITS, d4
0000135E  2A39 000014EA            458      move.l  EnemyChunkX, d5
00001364  2C39 000014EE            459      move.l  EnemyChunkY, d6
0000136A  4EB9 002DC1DA            460      jsr     DRAWIMAGE
00001370                           461      
00001370  4E75                     462      rts
00001372                           463      
00001372                           464  *------------------------------------------------------------*
00001372                           465  *------------------------------------------------------------*
00001372                           466  *-------------Draw the health bar for the runner-------------*
00001372                           467  *------------------------------------------------------------*
00001372                           468  *------------------------------------------------------------*     
00001372                           469  DrawRunnerHealth
00001372  41F9 002A0410            470      lea     RunnerHealthImage, a0
00001378  223C 000000C8            471      move.l  #200, d1
0000137E  7432                     472      move.l  #50, d2
00001380  7600                     473      move.l  #0, d3
00001382  7800                     474      move.l  #0, d4
00001384  7A00                     475      move.l  #0, d5
00001386  7C00                     476      move.l  #0, d6
00001388  4EB9 002DC1DA            477      jsr     DRAWIMAGE
0000138E  4E75                     478      rts
00001390                           479      
00001390                           480  *------------------------------------------------------------*
00001390                           481  *------------------------------------------------------------*
00001390                           482  *--------Draw background for both runner and enemy-----------*
00001390                           483  *------------------------------------------------------------*
00001390                           484  *------------------------------------------------------------* 
00001390                           485  updatePlayersBackgrounds
00001390  41F9 00001586            486      lea     BackGround, a0
00001396  2239 0000149C            487      move.l  RunnerWidth, d1
0000139C  2439 000014A0            488      move.l  RunnerHeight, d2
000013A2  2639 000014A4            489      move.l  RunnerX, d3
000013A8  2839 000014A8            490      move.l  RunnerY, d4
000013AE  E84C                     491      lsr     #FRAC_BITS, d4
000013B0  2A39 000014A4            492      move.l  RunnerX, d5
000013B6  2C39 000014A8            493      move.l  RunnerY, d6
000013BC  E84E                     494      lsr     #FRAC_BITS, d6
000013BE  4EB9 002DC1DA            495      jsr     DRAWIMAGE
000013C4  41F9 00001586            496      lea     BackGround, a0
000013CA  2239 000014DA            497      move.l  EnemyWidth, d1
000013D0  2439 000014DE            498      move.l  EnemyHeight, d2
000013D6  2639 000014E2            499      move.l  EnemyX, d3
000013DC  2839 000014E6            500      move.l  EnemyY, d4
000013E2  E84C                     501      lsr     #FRAC_BITS, d4
000013E4  2A39 000014E2            502      move.l  EnemyX, d5
000013EA  2C39 000014E6            503      move.l  EnemyY, d6
000013F0  E84E                     504      lsr     #FRAC_BITS, d6
000013F2  4EB9 002DC1DA            505      jsr     DRAWIMAGE
000013F8  4E75                     506      rts
000013FA                           507      
000013FA                           508  *Draw over both score backgrounds
000013FA                           509  updateScoreBackGround
000013FA  7050                     510      move.l      #80, d0
000013FC  7200                     511      move.l      #$00000000, d1
000013FE  4E4F                     512      trap        #15
00001400                           513      
00001400  7051                     514      move.l      #81, d0
00001402  7200                     515      move.l      #$00000000, d1
00001404  4E4F                     516      trap        #15
00001406                           517  
00001406  323C 00CD                518      move.w      #205, d1
0000140A  343C 0005                519      move.w      #5, d2
0000140E  363C 00EB                520      move.w      #235, d3
00001412  383C 0032                521      move.w      #50, d4
00001416  7057                     522      move.l      #87, d0
00001418  4E4F                     523      trap        #15
0000141A                           524      
0000141A  323C 01CC                525      move.w      #460, d1
0000141E  343C 0005                526      move.w      #5, d2
00001422  363C 01EF                527      move.w      #495, d3
00001426  383C 0032                528      move.w      #50, d4
0000142A  7057                     529      move.l      #87, d0
0000142C  4E4F                     530      trap        #15
0000142E                           531      
0000142E  4E75                     532      rts
00001430                           533  
00001430                           534  *------------------------------------------------------------*
00001430                           535  *------------------------------------------------------------*
00001430                           536  *-------------Draw both runner and enemy---------------------*
00001430                           537  *------------------------------------------------------------*
00001430                           538  *------------------------------------------------------------* 
00001430                           539  drawPlayers 
00001430                           540        
00001430  41F9 0027C9A4            541      lea     Runner, a0
00001436  2239 0000149C            542      move.l  RunnerWidth, d1
0000143C  2439 000014A0            543      move.l  RunnerHeight, d2
00001442  2639 000014A4            544      move.l  RunnerX, d3
00001448  2839 000014A8            545      move.l  RunnerY, d4
0000144E  E84C                     546      lsr     #FRAC_BITS, d4
00001450  2A39 000014AC            547      move.l  RunnerChunkX, d5
00001456  2C39 000014B0            548      move.l  RunnerChunkY, d6
0000145C  4EB9 002DC1DA            549      jsr     DRAWIMAGE
00001462                           550      
00001462  41F9 0028E6DA            551      lea     Enemy, a0
00001468  2239 000014DA            552      move.l  EnemyWidth, d1
0000146E  2439 000014DE            553      move.l  EnemyHeight, d2
00001474  2639 000014E2            554      move.l  EnemyX, d3
0000147A  2839 000014E6            555      move.l  EnemyY, d4
00001480  E84C                     556      lsr     #FRAC_BITS, d4
00001482  2A39 000014EA            557      move.l  EnemyChunkX, d5
00001488  2C39 000014EE            558      move.l  EnemyChunkY, d6
0000148E  4EB9 002DC1DA            559      jsr     DRAWIMAGE
00001494                           560      
00001494  103C 005E                561      move.b  #94, d0
00001498  4E4F                     562      trap    #15
0000149A                           563      
0000149A  4E75                     564      rts
0000149C                           565      
0000149C                           566  *-----------------------------------------------------------------------*
0000149C                           567  *-----------------------------------------------------------------------*
0000149C                           568  *-------------LIST OF VARIABLES AND CONSTANTS FOR RUNNER----------------*
0000149C                           569  *-----------------------------------------------------------------------*
0000149C                           570  *-----------------------------------------------------------------------*     
0000149C                           571  RunnerWidth
0000149C= 00000020                 572      dc.l   32
000014A0                           573  RunnerHeight
000014A0= 00000024                 574      dc.l   36 
000014A4                           575  RunnerX
000014A4= 0000000A                 576      dc.l    10
000014A8                           577  RunnerY
000014A8= 00000226                 578      dc.l    550
000014AC                           579  RunnerChunkX
000014AC= 000000A0                 580      dc.l    160
000014B0                           581  RunnerChunkY
000014B0= 00000000                 582      dc.l    0
000014B4                           583  RunnerSpeed
000014B4= 0000000A                 584      dc.l    10
000014B8                           585  RunnerJumping
000014B8= 00000000                 586      dc.l    0
000014BC                           587  RunnerHealth
000014BC= 00000008                 588      dc.l    8
000014C0                           589  RunnerLeft
000014C0= 00000000                 590      dc.l    0
000014C4                           591  RunnerIdleSprite
000014C4= 000000A0                 592      dc.l    160
000014C8                           593  RunnerJumpSprite
000014C8= 00000100                 594      dc.l    256
000014CC                           595  RunnerVelocity
000014CC= 00000000                 596      dc.l    0    
000014D0                           597  RunnerScoreX
000014D0= 000000C8                 598      dc.l    200
000014D4                           599  RunnerDamageSprite
000014D4= 00000120                 600      dc.l    288
000014D8                           601  PLAYER_SCORE    
000014D8                           602      DS.W    01 
000014DA                           603      
000014DA                           604  *------------------------------------------------------------*
000014DA                           605  *------------------------------------------------------------*
000014DA                           606  *-------------ENEMY VARIABLES AND CONSTANTS------------------*
000014DA                           607  *------------------------------------------------------------*
000014DA                           608  *------------------------------------------------------------*     
000014DA                           609  EnemyWidth
000014DA= 00000020                 610      dc.l   32
000014DE                           611  EnemyHeight
000014DE= 00000026                 612      dc.l    38 
000014E2                           613  EnemyX
000014E2= 0000027C                 614      dc.l    636
000014E6                           615  EnemyY
000014E6= 0000021C                 616      dc.l    540
000014EA                           617  EnemyChunkX
000014EA= 00000081                 618      dc.l    129
000014EE                           619  EnemyChunkY
000014EE= 00000000                 620      dc.l    0
000014F2                           621  EnemySpeed
000014F2= 0000000A                 622      dc.l    10
000014F6                           623  EnemyJumping
000014F6= 00000000                 624      dc.l    0
000014FA                           625  EnemyHealth
000014FA= 00000005                 626      dc.l    5
000014FE                           627  EnemyLeft
000014FE= 00000001                 628      dc.l    1
00001502                           629  EnemyIdleSprite
00001502= 00000081                 630      dc.l    129
00001506                           631  EnemyJumpSprite
00001506= 00000020                 632      dc.l    32
0000150A                           633  EnemyBeamSprite
0000150A= 00000040                 634      dc.l    64
0000150E                           635  EnemyDamageSprite
0000150E= 00000000                 636      dc.l    0
00001512                           637  EnemyProjectileActive
00001512= 00000000                 638      dc.l    0
00001516                           639  EnemyProjectileLeft
00001516= 00000000                 640      dc.l    0
0000151A                           641  EnemyProjectileWidth
0000151A= 00000010                 642      dc.l    16
0000151E                           643  EnemyProjectileHeight
0000151E= 0000000C                 644      dc.l    12
00001522                           645  EnemyProjectileX
00001522= 000002BC                 646      dc.l    700
00001526                           647  EnemyProjectileY
00001526= 0000000A                 648      dc.l    10
0000152A                           649  EnemyProjectileYOffset
0000152A= 0000000A                 650      dc.l    10
0000152E                           651  EnemyProjectileChunkX
0000152E= 0000002A                 652      dc.l    42
00001532                           653  EnemyProjectileChunkY
00001532= 00000000                 654      dc.l    0
00001536                           655  EnemyProjectileDamage
00001536= 00000001                 656      dc.l    1
0000153A                           657  EnemyVelocity
0000153A= 00000000                 658      dc.l    0
0000153E                           659  
0000153E                           660  *------------------------------------------------------------*
0000153E                           661  *------------------------------------------------------------*
0000153E                           662  *-------------GAME VARIABLES AND CONSTANTS-------------------*
0000153E                           663  *------------------------------------------------------------*
0000153E                           664  *------------------------------------------------------------*     
0000153E                           665  Ground
0000153E= 00000226                 666      dc.l    550
00001542                           667  ProjectileSpeed
00001542= 00000014                 668      dc.l    20
00001546                           669  
00001546                           670  
00001546                           671      
00001546                           672      
00001546                           673  *----------------------------------*
00001546                           674  *----------------------------------*
00001546                           675  *-------------MUSIC----------------*
00001546                           676  *----------------------------------*
00001546                           677  *----------------------------------*
00001546                           678  TitleMusic
00001546= 5469746C 65736372 ...    679      dc.l    'Titlescreen.wav',0
0000155A                           680  RunningMusic
0000155A= 496E6761 6D652E77 ...    681      dc.l    'Ingame.wav',0
0000156A                           682  GameOver
0000156A= 47616D65 6F766572 ...    683      dc.l    'Gameover.wav',0
0000157A                           684          
0000157A                           685      
0000157A                           686  *----------------------------------*
0000157A                           687  *----------------------------------*
0000157A                           688  *-------------SOUND EFFECTS--------*
0000157A                           689  *----------------------------------*
0000157A                           690  *----------------------------------*    
0000157A                           691  GetHit
0000157A= 4869742E 77617600 ...    692      dc.l    'Hit.wav',0
00001586                           693  
00001586                           694  
00001586                           695  *------------------------------------------------------------*
00001586                           696  *------------------------------------------------------------*
00001586                           697  *-------------IMAGES-----------------------------------------*
00001586                           698  *------------------------------------------------------------*
00001586                           699  *------------------------------------------------------------*    
00001586                           700  Background
00001586                           701      INCBIN "Game1.bmp"
00134FF0                           702  LoadingImage
00134FF0                           703      INCBIN "loadinggame.bmp"
00148F3A                           704  TitleScreen
00148F3A                           705      INCBIN "Titlesmall.bmp"
0027C9A4                           706  Runner
0027C9A4                           707      INCBIN "updated.bmp"
0028E6DA                           708  Enemy
0028E6DA                           709      INCBIN "Enemy1.bmp"
002A0410                           710  RunnerHealthImage
002A0410                           711      INCBIN "RunnersHealth.bmp"
002A7976                           712  SmallBeam
002A7976                           713      INCBIN "smallBeam.bmp"
002A7A80                           714  EndGame
002A7A80                           715      INCBIN "ded.bmp"
002DAF06                           716  DeadRunner
002DAF06                           717      INCBIN "Deadrunner.bmp"
002DC10C                           718  
002DC10C                           719  
002DC10C                           720  *------------------------------------------------------------*
002DC10C                           721  *------------------------------------------------------------*
002DC10C                           722  *-------------------INCLUDE OTHER FILES----------------------*
002DC10C                           723  *------------------------------------------------------------*
002DC10C                           724  *------------------------------------------------------------*
002DC10C                           725     
002DC10C                           726   include "DrawImages.x68"  
002DC10C                           727  
002DC10C  =00000050                728  PenColorCode      EQU     80
002DC10C  =00000052                729  DrawPixelCode     EQU     82
002DC10C  =00000021                730  ScreenChangeCode  EQU     33
002DC10C                           731  
002DC10C                           732  
002DC10C                           733  DrawChunk
002DC10C                           734  ;reads in file information and user input
002DC10C                           735  ;and sets the variables at the bottom and on stack
002DC10C                           736  ;which will be used to draw the chunk of the bmp file
002DC10C                           737  
002DC10C  206F 0004                738          move.l  4(sp), a0               ;store the pointer to the image data into an address for access
002DC110  2028 000A                739          move.l  10(a0), d0              ;grab the offset from header to pixels
002DC114  E158                     740          rol.w   #8, d0                  ;rotate the word by 8 to move offset to appropriate position          
002DC116  4840                     741          swap    d0                      ;now swap the words of the offset for the next rotate
002DC118  E158                     742          rol.w   #8, d0                  ;finally rotate the words one time to make the true offset value readable
002DC11A  D0C0                     743          add.w   d0, a0                  ;change position in memory to pixel data
002DC11C                           744          
002DC11C                           745  
002DC11C                           746      
002DC11C  4284                     747          clr.l   d4
002DC11E  282F 0024                748          move.l  36(sp),d4
002DC122  2A2F 0014                749          move.l  20(sp), d5
002DC126  DAAF 000C                750          add.l   12(sp), d5
002DC12A  9885                     751          sub.l   d5, d4
002DC12C  4285                     752          clr.l   d5
002DC12E  3A04                     753          move.w  d4, d5
002DC130  4284                     754          clr.l   d4
002DC132                           755          
002DC132  282F 0020                756          move.l  32(sp), d4
002DC136                           757          
002DC136  CAC4                     758          mulu.w  d4, d5
002DC138                           759          
002DC138                           760  
002DC138  D1C5                     761          add.l   d5, a0
002DC13A  D1C5                     762          add.l   d5, a0 
002DC13C  D1C5                     763          add.l   d5, a0       
002DC13E  262F 000C                764          move.l  12(sp), d3
002DC142                           765          
002DC142                           766          
002DC142                           767  OUTERLOOP
002DC142  3C3C 0000                768          move.w  #0, d6                  ;set or reset x counter for for loop
002DC146  282F 0010                769          move.l  16(sp), d4
002DC14A  C8FC 0003                770          mulu.w  #3, d4
002DC14E  D0C4                     771          add.w   d4, a0                  ;add start of x to 0
002DC150                           772          
002DC150                           773  INNERLOOP
002DC150  4284                     774          clr.l   d4                      ;make sure d4 has nothing in it
002DC152  1818                     775          move.b  (a0)+,d4                ;grab the first pixel
002DC154  4844                     776          swap.w  d4                      ;swap the pixel to change its position in memory for the rest of the pixel data
002DC156  4285                     777          clr.l   d5                      ;make sure d5 is also clear
002DC158  2A04                     778          move.l  d4, d5                  ;store previously found pixel data in d5 for next value
002DC15A  4284                     779          clr.l   d4                      ;clear d4 for the next bit of memory
002DC15C  1818                     780          move.b  (a0)+, d4               ;grab next memory bit
002DC15E  E14C                     781          lsl     #8, d4                  ;shift left to get pixel in top of second word to combine with previous pixel bit
002DC160  DA84                     782          add.l   d4, d5                  ;combine the data
002DC162  4284                     783          clr.l   d4                      ;clear d4 once again
002DC164  1818                     784          move.b  (a0)+, d4               ;get last bit needed
002DC166  DA84                     785          add.l   d4, d5                  ;combine it to the end of the previous two bits to get the pixel value
002DC168                           786          
002DC168                           787          
002DC168  4284                     788          clr.l   d4                      ;If pixel is pink, do not draw it
002DC16A  1838 00FF                789          move.b  $FF, d4
002DC16E  4844                     790          swap    d4
002DC170  1838 00FF                791          move.b  $FF, d4
002DC174                           792          
002DC174  BA44                     793          cmp     d4, d5
002DC176  6700 0006                794          BEQ     INCREMENT
002DC17A                           795          
002DC17A  6000 0044                796          BRA     DRAWPIXEL               ;pixel meets criteria and can be printed
002DC17E                           797  
002DC17E                           798  INCREMENT
002DC17E  4284                     799          clr.l   d4                      ;make sure d4 is empty for use  
002DC180  5246                     800          add.w   #1,d6                   ;increment x counter by one
002DC182                           801          
002DC182                           802          *Check for end of X row
002DC182  282F 0010                803          move.l  16(sp), d4
002DC186  D886                     804          add.l   d6, d4
002DC188  2A2F 0020                805          move.l  32(sp), d5
002DC18C  B845                     806          cmp     d5, d4
002DC18E  6700 0022                807          BEQ     INCREMENTY
002DC192                           808        
002DC192  282F 0008                809          move.l  8(sp), d4               ;move width of image into register
002DC196  BC44                     810          cmp     d4, d6                  ;see if counter is beyond x bounds
002DC198  66B6                     811          BNE     INNERLOOP               ;if it is not, loop again
002DC19A                           812          
002DC19A                           813          ;skip after outside of box on x axis
002DC19A  4284                     814          clr.l   d4
002DC19C  282F 0010                815          move.l  16(sp), d4
002DC1A0  D8AF 0008                816          add.l   8(sp), d4
002DC1A4  4285                     817          clr.l   d5
002DC1A6  2A2F 0020                818          move.l  32(sp), d5
002DC1AA  9A84                     819          sub.l   d4, d5
002DC1AC  CAFC 0003                820          mulu.w  #3, d5
002DC1B0                           821          ;add offset to address
002DC1B0  D1C5                     822          add.l   d5, a0
002DC1B2                           823          
002DC1B2                           824          
002DC1B2                           825  INCREMENTY        
002DC1B2                           826          ;take care of padding
002DC1B2  D1F9 002DC24E            827          add.l   Padding, a0             ;add padding.  If there is none, the address won't skip anything
002DC1B8                           828          
002DC1B8  5343                     829          sub.w   #1, d3                  ;decrement y counter to see if you are out of the y iteration
002DC1BA  6686                     830          BNE     OUTERLOOP               ;if it is not, loop back to outer loop
002DC1BC  6000 001A                831          BRA     ENDROUTINE              ;branch to end of subroutine, whole image has been iterated
002DC1C0                           832          
002DC1C0                           833          
002DC1C0                           834  DRAWPIXEL
002DC1C0  2205                     835          move.l  d5, d1                  ;move pixel data into d1 for pen color
002DC1C2  7050                     836          move.l  #PenColorCode, d0       ;set trap code for setting the pen color
002DC1C4  4E4F                     837          trap    #15                     ;set pen color
002DC1C6                           838                           
002DC1C6  222F 0018                839          move.l   24(sp), d1             ;store the starting x position of the chunk
002DC1CA  D286                     840          add.l    d6, d1                 ;add iteration position of x to start of chunk
002DC1CC                           841          
002DC1CC  242F 001C                842          move.l  28(sp), d2              ;start at top of chunk to flip image
002DC1D0  D483                     843          add.l   d3, d2                  ;subtract current y position
002DC1D2  7052                     844          move.l  #DrawPixelCode, d0      ;Set trap code to draw pixel at position
002DC1D4  4E4F                     845          trap    #15                     ;draw pixel at position
002DC1D6                           846          
002DC1D6  60A6                     847          BRA     INCREMENT               ;increment position
002DC1D8                           848          
002DC1D8                           849          
002DC1D8                           850  ENDROUTINE
002DC1D8  4E75                     851          rts                             ;branch back to end of program
002DC1DA                           852  
002DC1DA                           853  
002DC1DA                           854  DRAWIMAGE
002DC1DA                           855          *Reset padding for multiple calls
002DC1DA  23FC 00000000 002DC24E   856          move.l  #0, Padding
002DC1E4                           857          
002DC1E4  7024                     858          move.l  #36, d0                 ;number of 7 4 byte arguments to prepare stack to receive
002DC1E6  9FC0                     859          sub.l   d0, sp                  ;prepare stack to receive arguments 
002DC1E8                           860          
002DC1E8  2E88                     861          move.l  a0, (sp)                ;load pointer to the .bmp file onto the stack
002DC1EA                           862          
002DC1EA                           863          ;store width of chunk on the stack
002DC1EA  2F41 0004                864          move.l  d1, 4(sp)
002DC1EE                           865          ;store height of the chunk on the stack 
002DC1EE  2F42 0008                866          move.l  d2, 8(sp)               
002DC1F2                           867          
002DC1F2                           868          ;add start of chunk to move with image
002DC1F2  2F45 000C                869          move.l   d5, 12(sp)             ;store Top left x of draw chunk on stack
002DC1F6                           870          
002DC1F6                           871          ;subtract y position from height to get start y
002DC1F6  2F46 0010                872          move.l  d6, 16(sp)              ;store Top left y of draw chunk on stack                      
002DC1FA                           873  
002DC1FA  2F43 0014                874          move.l  d3, 20(sp)              ;store Beginning print location for x axis on stack
002DC1FE  2F44 0018                875          move.l  d4, 24(sp)              ;store Beginning print location for y axis on stack
002DC202                           876          
002DC202  2228 0012                877          move.l  18(a0), d1              ;get width of image from .bmp file
002DC206  E159                     878          rol.w   #8, d1          
002DC208  4841                     879          swap    d1
002DC20A  E159                     880          rol.w   #8, d1                  ;rotate and swap long word to get true width value to use later
002DC20C  2F41 001C                881          move.l  d1, 28(sp)              ;store width of image to make variable not global
002DC210                           882  
002DC210                           883          
002DC210                           884          ;calculate for padding.  
002DC210                           885          ;This only concerns width
002DC210  7404                     886          move.l  #4, d2                  ;move 4 into register for padding calculation
002DC212  C2FC 0003                887          mulu.w  #3, d1                  ;multiply image width by 3 for formula
002DC216  82FC 0004                888          divu.w  #4, d1                  ;divide by four to find remainder
002DC21A  4841                     889          swap    d1                      ;swap remainder into lower word
002DC21C  4284                     890          clr.l   d4                      ;make sure d4 is empty
002DC21E  383C 0000                891          move.w  #0, d4                  ;move 0 into d4 
002DC222  B841                     892          cmp.w   d1, d4                  ;if equal, there is no padding
002DC224  6700 000A                893          BEQ     RUNPROGRAM              ;continue in program for special case of being divisible by 4
002DC228                           894          
002DC228                           895          
002DC228                           896  ACCOUNTFORPADDING
002DC228  9441                     897          sub.w   d1, d2                  ;subtract remainder from 4 to get padding
002DC22A  23C2 002DC24E            898          move.l  d2, Padding             ;store padding for later use
002DC230                           899          
002DC230                           900          
002DC230                           901  RUNPROGRAM       
002DC230  2428 0016                902          move.l  22(a0), d2              ;get height of image from .bmp file
002DC234  E15A                     903          rol.w   #8, d2          
002DC236  4842                     904          swap    d2
002DC238  E15A                     905          rol.w   #8, d2                  ;rotate and swap long word to get true height value to use later
002DC23A  2F42 0020                906          move.l  d2, 32(sp)              ;store height of image to make variable not global
002DC23E                           907  
002DC23E  4EB9 002DC10C            908          jsr     DrawChunk               ;call subroutine to draw chunk of image       
002DC244                           909         
002DC244  4280                     910          clr.l   d0
002DC246  7024                     911          move.l  #36, d0                
002DC248  DFC0                     912          add.l   d0, sp                  ;fix stack
002DC24A                           913          
002DC24A  4287                     914          clr.l   d7
002DC24C                           915          
002DC24C  4E75                     916          rts
002DC24E                           917  
002DC24E                           918  Padding
002DC24E= 00000000                 919          dc.l    0
002DC252                           920  
002DC252                           921  -------------------- end include --------------------
002DC252                           922   include "RunnerControls.x68"
002DC252                           923  
002DC252                           924  
002DC252                           925  ALL_REG                 REG     D0-D7/A0-A6
002DC252  =00000013                926  GET_KEY_INPUT_COMMAND   equ     19        
002DC252                           927  
002DC252                           928  initRunnerInput
002DC252  7420                     929          move.l          #$20,d2
002DC254                           930          
002DC254                           931  inputLoop
002DC254  4280                     932          clr.l           d0   
002DC256  103C 0013                933          move.b          #GET_KEY_INPUT_COMMAND,d0
002DC25A  2202                     934          move.l          d2,d1
002DC25C  4E4F                     935          TRAP            #15
002DC25E                           936          
002DC25E  0C01 0000                937          cmpi.b          #0,d1
002DC262  6700 0008                938          beq             noCall
002DC266  4EB9 002DC28A            939          jsr             callFunction
002DC26C                           940          
002DC26C                           941  noCall
002DC26C                           942  
002DC26C  5282                     943          add.l           #1,d2          
002DC26E                           944  
002DC26E  0C02 005A                945          cmpi.b          #$5A,d2
002DC272  66E0                     946          bne             inputLoop
002DC274  23FC 00000000 002DC5B6   947          move.l          #0, RunnerBeamPressed
002DC27E  23FC 00000000 002DC5BA   948          move.l          #0, EnemyBeamPressed
002DC288  4E75                     949          rts
002DC28A                           950          
002DC28A                           951  callFunction
002DC28A  48E7 FFFE                952          movem.l ALL_REG,-(sp)
002DC28E                           953          
002DC28E  41F9 002DC4CA            954          lea     FunctionTable,a0
002DC294  0482 00000020            955          sub.l   #$20,d2
002DC29A  E58A                     956          lsl.l   #2,d2
002DC29C  2230 2000                957          move.l  (a0,d2),d1
002DC2A0  0C81 00000000            958          cmpi.l  #0,d1
002DC2A6  6700 0006                959          beq     noFuncPtr
002DC2AA                           960  
002DC2AA  2241                     961          move.l  d1,a1
002DC2AC  4E91                     962          jsr     (a1) 
002DC2AE                           963  
002DC2AE                           964   
002DC2AE                           965  noFuncPtr
002DC2AE  4CDF 7FFF                966          movem.l (sp)+,ALL_REG
002DC2B2  4E75                     967          rts
002DC2B4                           968  
002DC2B4                           969  
002DC2B4                           970  
002DC2B4                           971  
002DC2B4                           972  
002DC2B4                           973  
002DC2B4                           974  
002DC2B4                           975  
002DC2B4                           976  
002DC2B4                           977  
002DC2B4                           978  spaceRoutine
002DC2B4  48E7 FFFE                979          movem.l ALL_REG,-(sp)   
002DC2B8  4CDF 7FFF                980          movem.l (sp)+,ALL_REG
002DC2BC                           981          
002DC2BC  203C 00000226            982          move.l  #550, d0
002DC2C2  2238 14A8                983          move.l  RunnerY, d1
002DC2C6  E849                     984          lsr     #FRAC_BITS, d1
002DC2C8  B280                     985          cmp.l   d0,d1
002DC2CA  6600 0002                986          BNE     jumpLoop
002DC2CE                           987       
002DC2CE                           988  jumpLoop
002DC2CE  21FC 00000000 14CC       989          move.l  #0, RunnerVelocity
002DC2D6  2838 14A8                990          move.l  RunnerY, d4
002DC2DA  7A32                     991          move.l  #50, d5
002DC2DC  E94D                     992          lsl     #FRAC_BITS, d5
002DC2DE  2C38 14A8                993          move.l  RunnerY, d6
002DC2E2  2638 14B4                994          move.l  RunnerSpeed, d3
002DC2E6  E94B                     995          lsl     #FRAC_BITS, d3
002DC2E8  9C83                     996          sub.l   d3, d6
002DC2EA  BC45                     997          cmp     d5, d6
002DC2EC  6D00 0016                998          BLT     spaceRoutineExit
002DC2F0                           999          
002DC2F0  21F8 14C8 14AC          1000          move.l  RunnerJumpSprite, RunnerChunkX
002DC2F6  9883                    1001          sub.l   d3, d4
002DC2F8  21C4 14A8               1002          move.l  d4, RunnerY
002DC2FC  21FC 00000001 14B8      1003          move.l  #1, RunnerJumping
002DC304                          1004          
002DC304                          1005  spaceRoutineExit
002DC304  4E75                    1006          rts
002DC306                          1007          
002DC306                          1008  leftRoutine
002DC306  48E7 FFFE               1009          movem.l ALL_REG,-(sp)   
002DC30A  4CDF 7FFF               1010          movem.l (sp)+,ALL_REG
002DC30E  4E75                    1011          rts
002DC310                          1012  upRoutine
002DC310  48E7 FFFE               1013          movem.l ALL_REG,-(sp)   
002DC314  4CDF 7FFF               1014          movem.l (sp)+,ALL_REG
002DC318  4E75                    1015          rts 
002DC31A                          1016  rightRoutine   
002DC31A  48E7 FFFE               1017          movem.l ALL_REG,-(sp)   
002DC31E  4CDF 7FFF               1018          movem.l (sp)+,ALL_REG
002DC322  4E75                    1019          rts     
002DC324                          1020  downRoutine
002DC324  48E7 FFFE               1021          movem.l ALL_REG,-(sp)   
002DC328  4CDF 7FFF               1022          movem.l (sp)+,ALL_REG
002DC32C  4E75                    1023          rts
002DC32E                          1024  routine0
002DC32E  48E7 FFFE               1025          movem.l ALL_REG,-(sp)   
002DC332  4CDF 7FFF               1026          movem.l (sp)+,ALL_REG
002DC336  4E75                    1027          rts
002DC338                          1028  routine1
002DC338  48E7 FFFE               1029          movem.l ALL_REG,-(sp)   
002DC33C  4CDF 7FFF               1030          movem.l (sp)+,ALL_REG
002DC340  4E75                    1031          rts     
002DC342                          1032  routine2
002DC342  48E7 FFFE               1033          movem.l ALL_REG,-(sp)   
002DC346  4CDF 7FFF               1034          movem.l (sp)+,ALL_REG
002DC34A  4E75                    1035          rts     
002DC34C                          1036  routine3
002DC34C  48E7 FFFE               1037          movem.l ALL_REG,-(sp)   
002DC350  4CDF 7FFF               1038          movem.l (sp)+,ALL_REG
002DC354  4E75                    1039          rts     
002DC356                          1040  routine4
002DC356  48E7 FFFE               1041          movem.l ALL_REG,-(sp)   
002DC35A  4CDF 7FFF               1042          movem.l (sp)+,ALL_REG
002DC35E  4E75                    1043          rts     
002DC360                          1044  routine5
002DC360  48E7 FFFE               1045          movem.l ALL_REG,-(sp)   
002DC364  4CDF 7FFF               1046          movem.l (sp)+,ALL_REG
002DC368  4E75                    1047          rts
002DC36A                          1048  routine6
002DC36A  48E7 FFFE               1049          movem.l ALL_REG,-(sp)   
002DC36E  4CDF 7FFF               1050          movem.l (sp)+,ALL_REG
002DC372  4E75                    1051          rts
002DC374                          1052  routine7
002DC374  48E7 FFFE               1053          movem.l ALL_REG,-(sp)   
002DC378  4CDF 7FFF               1054          movem.l (sp)+,ALL_REG
002DC37C  4E75                    1055          rts
002DC37E                          1056  routine8
002DC37E  48E7 FFFE               1057          movem.l ALL_REG,-(sp)   
002DC382  4CDF 7FFF               1058          movem.l (sp)+,ALL_REG
002DC386  4E75                    1059          rts
002DC388                          1060  routine9
002DC388  48E7 FFFE               1061          movem.l ALL_REG,-(sp)   
002DC38C  4CDF 7FFF               1062          movem.l (sp)+,ALL_REG
002DC390  4E75                    1063          rts
002DC392                          1064  routineA
002DC392  48E7 FFFE               1065          movem.l ALL_REG,-(sp)   
002DC396  4CDF 7FFF               1066          movem.l (sp)+,ALL_REG
002DC39A  4E75                    1067          rts
002DC39C                          1068  routineB
002DC39C  48E7 FFFE               1069          movem.l ALL_REG,-(sp)   
002DC3A0  4CDF 7FFF               1070          movem.l (sp)+,ALL_REG
002DC3A4  4E75                    1071          rts
002DC3A6                          1072  routineC
002DC3A6  48E7 FFFE               1073          movem.l ALL_REG,-(sp)   
002DC3AA  4CDF 7FFF               1074          movem.l (sp)+,ALL_REG
002DC3AE  4E75                    1075          rts
002DC3B0                          1076  routineD
002DC3B0  48E7 FFFE               1077          movem.l ALL_REG,-(sp)   
002DC3B4  4CDF 7FFF               1078          movem.l (sp)+,ALL_REG
002DC3B8  4E75                    1079          rts
002DC3BA                          1080  routineE
002DC3BA  48E7 FFFE               1081          movem.l ALL_REG,-(sp)   
002DC3BE  4CDF 7FFF               1082          movem.l (sp)+,ALL_REG
002DC3C2  4E75                    1083          rts
002DC3C4                          1084  routineF
002DC3C4  48E7 FFFE               1085          movem.l ALL_REG,-(sp)   
002DC3C8  4CDF 7FFF               1086          movem.l (sp)+,ALL_REG
002DC3CC  4E75                    1087          rts
002DC3CE                          1088  routineG
002DC3CE  48E7 FFFE               1089          movem.l ALL_REG,-(sp)   
002DC3D2  4CDF 7FFF               1090          movem.l (sp)+,ALL_REG
002DC3D6  4E75                    1091          rts
002DC3D8                          1092  routineH
002DC3D8  48E7 FFFE               1093          movem.l ALL_REG,-(sp)   
002DC3DC  4CDF 7FFF               1094          movem.l (sp)+,ALL_REG
002DC3E0  4E75                    1095          rts
002DC3E2                          1096  routineI
002DC3E2  48E7 FFFE               1097          movem.l ALL_REG,-(sp)   
002DC3E6  4CDF 7FFF               1098          movem.l (sp)+,ALL_REG
002DC3EA  4E75                    1099          rts
002DC3EC                          1100  routineJ
002DC3EC  48E7 FFFE               1101          movem.l ALL_REG,-(sp)   
002DC3F0  4CDF 7FFF               1102          movem.l (sp)+,ALL_REG
002DC3F4  4E75                    1103          rts
002DC3F6                          1104  routineK
002DC3F6  48E7 FFFE               1105          movem.l ALL_REG,-(sp)   
002DC3FA  4CDF 7FFF               1106          movem.l (sp)+,ALL_REG
002DC3FE  4E75                    1107          rts
002DC400                          1108  
002DC400                          1109  routineL
002DC400  48E7 FFFE               1110          movem.l ALL_REG,-(sp)   
002DC404  4CDF 7FFF               1111          movem.l (sp)+,ALL_REG
002DC408  4E75                    1112          rts
002DC40A                          1113  
002DC40A                          1114  routineM
002DC40A  48E7 FFFE               1115          movem.l ALL_REG,-(sp)   
002DC40E  4CDF 7FFF               1116          movem.l (sp)+,ALL_REG
002DC412  4E75                    1117          rts
002DC414                          1118  
002DC414                          1119  routineN
002DC414  48E7 FFFE               1120          movem.l ALL_REG,-(sp)   
002DC418  4CDF 7FFF               1121          movem.l (sp)+,ALL_REG
002DC41C  4E75                    1122          rts
002DC41E                          1123  
002DC41E                          1124  routineO
002DC41E                          1125          *Spawn beam for player 2
002DC41E  48E7 FFFE               1126          movem.l ALL_REG,-(sp)   
002DC422  4CDF 7FFF               1127          movem.l (sp)+,ALL_REG
002DC426                          1128          *check boolean of button pressed and projectile active
002DC426  2039 002DC5BA           1129          move.l  EnemyBeamPressed, d0
002DC42C  0C80 00000000           1130          cmpi.l  #0, d0
002DC432  6600 0026               1131          BNE     routineOExit
002DC436                          1132          
002DC436  23FC 00000001 002DC5BA  1133          move.l  #1, EnemyBeamPressed
002DC440                          1134          
002DC440  2038 1512               1135          move.l  EnemyProjectileActive, d0
002DC444  0C80 00000000           1136          cmpi.l  #0, d0
002DC44A  6600 000E               1137          BNE     routineOExit
002DC44E                          1138          *update sprite
002DC44E  21F8 150A 14EA          1139          move.l  EnemyBeamSprite, EnemyChunkX
002DC454                          1140          
002DC454  4EB9 002DC728           1141          jsr     spawnEnemyProjectile
002DC45A                          1142          
002DC45A                          1143  routineOExit
002DC45A  4E75                    1144          rts
002DC45C                          1145  
002DC45C                          1146  routineP
002DC45C  48E7 FFFE               1147          movem.l ALL_REG,-(sp)   
002DC460  4CDF 7FFF               1148          movem.l (sp)+,ALL_REG
002DC464  4E75                    1149          rts
002DC466                          1150  
002DC466                          1151  routineQ
002DC466  48E7 FFFE               1152          movem.l ALL_REG,-(sp)   
002DC46A  4CDF 7FFF               1153          movem.l (sp)+,ALL_REG
002DC46E  4E75                    1154          rts
002DC470                          1155  
002DC470                          1156  routineR
002DC470  48E7 FFFE               1157          movem.l ALL_REG,-(sp)   
002DC474  4CDF 7FFF               1158          movem.l (sp)+,ALL_REG
002DC478  4E75                    1159          rts
002DC47A                          1160  
002DC47A                          1161  routineS
002DC47A  48E7 FFFE               1162          movem.l ALL_REG,-(sp)   
002DC47E  4CDF 7FFF               1163          movem.l (sp)+,ALL_REG
002DC482  4E75                    1164          rts
002DC484                          1165  
002DC484                          1166  routineT
002DC484  48E7 FFFE               1167          movem.l ALL_REG,-(sp)   
002DC488  4CDF 7FFF               1168          movem.l (sp)+,ALL_REG
002DC48C  4E75                    1169          rts
002DC48E                          1170  
002DC48E                          1171  routineU
002DC48E  48E7 FFFE               1172          movem.l ALL_REG,-(sp)   
002DC492  4CDF 7FFF               1173          movem.l (sp)+,ALL_REG
002DC496  4E75                    1174          rts
002DC498                          1175  
002DC498                          1176  routineV
002DC498                          1177  
002DC498  48E7 FFFE               1178          movem.l ALL_REG,-(sp)   
002DC49C  4CDF 7FFF               1179          movem.l (sp)+,ALL_REG
002DC4A0  4E75                    1180          rts
002DC4A2                          1181  
002DC4A2                          1182  routineW
002DC4A2  48E7 FFFE               1183          movem.l ALL_REG,-(sp)   
002DC4A6  4CDF 7FFF               1184          movem.l (sp)+,ALL_REG
002DC4AA  4E75                    1185          rts
002DC4AC                          1186  
002DC4AC                          1187  routineX
002DC4AC  48E7 FFFE               1188          movem.l ALL_REG,-(sp)   
002DC4B0  4CDF 7FFF               1189          movem.l (sp)+,ALL_REG
002DC4B4  4E75                    1190          rts
002DC4B6                          1191  
002DC4B6                          1192  routineY
002DC4B6  48E7 FFFE               1193          movem.l ALL_REG,-(sp)   
002DC4BA  4CDF 7FFF               1194          movem.l (sp)+,ALL_REG
002DC4BE  4E75                    1195          rts
002DC4C0                          1196  
002DC4C0                          1197  routineZ
002DC4C0  48E7 FFFE               1198          movem.l ALL_REG,-(sp)   
002DC4C4  4CDF 7FFF               1199          movem.l (sp)+,ALL_REG
002DC4C8  4E75                    1200          rts
002DC4CA                          1201          
002DC4CA                          1202  
002DC4CA                          1203  FunctionTable   
002DC4CA                          1204                  
002DC4CA= 002DC2B4                1205                  dc.l    spaceRoutine
002DC4CE= 00000000 00000000 ...   1206                  dc.l    0,0,0,0
002DC4DE= 002DC306 002DC310 ...   1207                  dc.l    leftRoutine,upRoutine,rightRoutine,downRoutine
002DC4EE= 00000000 00000000 ...   1208                  dc.l    0,0,0,0,0,0,0
002DC50A= 002DC32E 002DC338 ...   1209                  dc.l    routine0,routine1,routine2,routine3,routine4,routine5,routine6,routine7,routine8,routine9
002DC532= 00000000 00000000 ...   1210                  dc.l    0,0,0,0,0,0,0
002DC54E= 002DC392 002DC39C ...   1211                  dc.l    routineA,routineB,routineC,routineD,routineE,routineF,routineG
002DC56A= 002DC3D8 002DC3E2 ...   1212                  dc.l    routineH,routineI,routineJ,routineK,routineL,routineM,routineN
002DC586= 002DC41E 002DC45C ...   1213                  dc.l    routineO,routineP,routineQ,routineR,routineS,routineT,routineU
002DC5A2= 002DC498 002DC4A2 ...   1214                  dc.l    routineV,routineW,routineX,routineY,routineZ
002DC5B6                          1215                  
002DC5B6                          1216  RunnerBeamPressed
002DC5B6= 00000000                1217          dc.l    0
002DC5BA                          1218  EnemyBeamPressed
002DC5BA= 00000000                1219          dc.l    0
002DC5BE                          1220          
002DC5BE                          1221  
002DC5BE                          1222  
002DC5BE                          1223  
002DC5BE                          1224  
002DC5BE                          1225  
002DC5BE                          1226  
002DC5BE                          1227  
002DC5BE                          1228  
002DC5BE                          1229  
002DC5BE                          1230  
002DC5BE                          1231  
002DC5BE                          1232  
002DC5BE                          1233  
002DC5BE                          1234  
002DC5BE                          1235  
002DC5BE                          1236  
002DC5BE                          1237  
002DC5BE                          1238  
002DC5BE                          1239  
002DC5BE                          1240  
002DC5BE                          1241  
002DC5BE                          1242  
002DC5BE                          1243  
002DC5BE                          1244  
002DC5BE                          1245  
002DC5BE                          1246  
002DC5BE                          1247  
002DC5BE                          1248  
002DC5BE                          1249  
002DC5BE                          1250  
002DC5BE                          1251  
002DC5BE                          1252  
002DC5BE                          1253  
002DC5BE                          1254  
002DC5BE                          1255  -------------------- end include --------------------
002DC5BE                          1256   include "RunnerHealth.X68"
002DC5BE                          1257  
002DC5BE                          1258  
002DC5BE                          1259  
002DC5BE                          1260  updateHealth
002DC5BE                          1261      *get the position of the current health based on the player health passed in
002DC5BE  207C 002DC700           1262      move.l      #zeroDigit, a0
002DC5C4                          1263      *multiply digit by 4 to get correct hex number at the end of the file
002DC5C4  E588                    1264      lsl.l       #2, d0
002DC5C6  D1C0                    1265      add.l       d0, a0    
002DC5C8                          1266      *store the current hex value of health
002DC5C8  2C10                    1267      move.l      (a0), d6
002DC5CA                          1268      
002DC5CA                          1269      *Change pen to white for each segment
002DC5CA  7050                    1270      move.l      #80, d0
002DC5CC  223C 00FFFFFF           1271      move.l      #$00FFFFFF, d1
002DC5D2  4E4F                    1272      trap        #15
002DC5D4                          1273      
002DC5D4  7051                    1274      move.l      #81, d0
002DC5D6  223C 00FFFFFF           1275      move.l      #$00FFFFFF, d1
002DC5DC  4E4F                    1276      trap        #15
002DC5DE                          1277  
002DC5DE                          1278  
002DC5DE                          1279  GDigitRoutine
002DC5DE  2206                    1280      move.l      d6, d1     
002DC5E0  C2BC 00000001           1281      AND.l       #1, d1
002DC5E6  6700 001C               1282      BEQ         FDigitRoutine
002DC5EA  323C 0005               1283      move.w      #5, d1
002DC5EE  D285                    1284      add.l       d5, d1
002DC5F0  343C 0014               1285      move.w      #20, d2
002DC5F4  363C 0023               1286      move.w      #35, d3
002DC5F8  D685                    1287      add.l       d5, d3
002DC5FA  383C 001E               1288      move.w      #30, d4
002DC5FE  4EB9 002DC6F8           1289      jsr         DrawDigitPosition
002DC604                          1290  FDigitRoutine
002DC604  E88E                    1291      lsr.l         #4, d6
002DC606  2206                    1292      move.l      d6, d1
002DC608  C2BC 00000001           1293      AND.l       #1, d1
002DC60E  6700 001C               1294      BEQ         EDigitRoutine
002DC612  323C 0005               1295      move.w      #5, d1
002DC616  D285                    1296      add.l       d5, d1
002DC618  343C 0005               1297      move.w      #5, d2
002DC61C  363C 000F               1298      move.w      #15, d3
002DC620  D685                    1299      add.l       d5, d3
002DC622  383C 0019               1300      move.w      #25, d4
002DC626  4EB9 002DC6F8           1301      jsr         DrawDigitPosition
002DC62C                          1302  EDigitRoutine
002DC62C  E88E                    1303      lsr.l         #4, d6
002DC62E  2206                    1304      move.l      d6, d1
002DC630  C2BC 00000001           1305      AND.l       #1, d1
002DC636  6700 001C               1306      BEQ         DDigitRoutine
002DC63A  323C 0005               1307      move.w      #5, d1
002DC63E  D285                    1308      add.l       d5, d1
002DC640  343C 0019               1309      move.w      #25, d2
002DC644  363C 000F               1310      move.w      #15, d3
002DC648  D685                    1311      add.l       d5, d3
002DC64A  383C 002D               1312      move.w      #45, d4
002DC64E  4EB9 002DC6F8           1313      jsr         DrawDigitPosition
002DC654                          1314  DDigitRoutine
002DC654  E88E                    1315      lsr.l         #4, d6
002DC656  2206                    1316      move.l      d6, d1
002DC658  C2BC 00000001           1317      AND.l       #1, d1
002DC65E  6700 001C               1318      BEQ         CDigitRoutine
002DC662  323C 0005               1319      move.w      #5, d1
002DC666  D285                    1320      add.l       d5, d1
002DC668  343C 0023               1321      move.w      #35, d2
002DC66C  363C 0023               1322      move.w      #35, d3
002DC670  D685                    1323      add.l       d5, d3
002DC672  383C 002D               1324      move.w      #45, d4
002DC676  4EB9 002DC6F8           1325      jsr         DrawDigitPosition
002DC67C                          1326  CDigitRoutine
002DC67C  E88E                    1327      lsr.l         #4, d6
002DC67E  2206                    1328      move.l      d6, d1
002DC680  C2BC 00000001           1329      AND.l       #1, d1
002DC686  6700 001C               1330      BEQ         BDigitRoutine
002DC68A  323C 0019               1331      move.w      #25, d1
002DC68E  D285                    1332      add.l       d5, d1
002DC690  343C 0019               1333      move.w      #25, d2
002DC694  363C 0023               1334      move.w      #35, d3
002DC698  D685                    1335      add.l       d5, d3
002DC69A  383C 002D               1336      move.w      #45, d4
002DC69E  4EB9 002DC6F8           1337      jsr         DrawDigitPosition
002DC6A4                          1338  BDigitRoutine
002DC6A4  E88E                    1339      lsr.l         #4, d6
002DC6A6  2206                    1340      move.l      d6, d1
002DC6A8  C2BC 00000001           1341      AND.l       #1, d1
002DC6AE  6700 001C               1342      BEQ         ADigitRoutine
002DC6B2  323C 0019               1343      move.w      #25, d1
002DC6B6  D285                    1344      add.l       d5, d1
002DC6B8  343C 0005               1345      move.w      #5, d2
002DC6BC  363C 0023               1346      move.w      #35, d3
002DC6C0  D685                    1347      add.l       d5, d3
002DC6C2  383C 0019               1348      move.w      #25, d4
002DC6C6  4EB9 002DC6F8           1349      jsr         DrawDigitPosition
002DC6CC                          1350  ADigitRoutine
002DC6CC  E88E                    1351      lsr.l         #4, d6
002DC6CE  2206                    1352      move.l      d6, d1
002DC6D0  C2BC 00000001           1353      AND.l       #1, d1
002DC6D6  6700 0026               1354      BEQ         FinishHealth
002DC6DA  323C 0005               1355      move.w      #5, d1
002DC6DE  D285                    1356      add.l       d5, d1
002DC6E0  343C 0005               1357      move.w      #5, d2
002DC6E4  363C 0023               1358      move.w      #35, d3
002DC6E8  D685                    1359      add.l       d5, d3
002DC6EA  383C 000F               1360      move.w      #15, d4
002DC6EE  4EB9 002DC6F8           1361      jsr         DrawDigitPosition
002DC6F4                          1362      
002DC6F4  6000 0008               1363      BRA         FinishHealth
002DC6F8                          1364  
002DC6F8                          1365  
002DC6F8                          1366  DrawDigitPosition
002DC6F8  7057                    1367      move.l      #87, d0
002DC6FA  4E4F                    1368      trap        #15
002DC6FC  4E75                    1369      rts
002DC6FE                          1370  
002DC6FE                          1371  FinishHealth
002DC6FE  4E75                    1372      rts
002DC700                          1373  
002DC700                          1374  
002DC700                          1375  zeroDigit   
002DC700= 01111110                1376      dc.l    $01111110
002DC704                          1377  oneDigit    
002DC704= 00110000                1378      dc.l    $00110000
002DC708                          1379  twoDigit    
002DC708= 01101101                1380      dc.l    $01101101
002DC70C                          1381  threeDigit  
002DC70C= 01111001                1382      dc.l    $01111001
002DC710                          1383  fourDigit   
002DC710= 00110011                1384      dc.l    $00110011
002DC714                          1385  fiveDigit       
002DC714= 01011011                1386      dc.l    $01011011
002DC718                          1387  sixDigit    
002DC718= 01011111                1388      dc.l    $01011111
002DC71C                          1389  sevenDigit  
002DC71C= 01110000                1390      dc.l    $01110000
002DC720                          1391  eightDigit  
002DC720= 01111111                1392      dc.l    $01111111
002DC724                          1393  nineDigit   
002DC724= 01111011                1394      dc.l    $01111011
002DC728                          1395  
002DC728                          1396  
002DC728                          1397  -------------------- end include --------------------
002DC728                          1398   include "EnemyProjectileRunning.X68"
002DC728                          1399  spawnEnemyProjectile
002DC728  21FC 00000001 1512      1400      move.l  #1, EnemyProjectileActive
002DC730  2238 14FE               1401      move.l  EnemyLeft, d1
002DC734  0C81 00000001           1402      cmpi.l  #1, d1
002DC73A  6700 006C               1403      BEQ     spawnEnemyProjectileLeft
002DC73E                          1404  spawnEnemyProjectileRight
002DC73E  21FC 00000000 1516      1405      move.l  #0, EnemyProjectileLeft
002DC746                          1406  
002DC746                          1407  
002DC746  2038 14EE               1408      move.l  EnemyChunkY, d0
002DC74A  0C80 00000000           1409      cmpi.l  #0, d0
002DC750  6700 0006               1410      BEQ     drawTinyEnemyProjectileRight
002DC754                          1411      
002DC754                          1412   
002DC754                          1413      
002DC754  6000 0008               1414      BRA     drawEnemyProjectileRight
002DC758                          1415      
002DC758                          1416      
002DC758                          1417      
002DC758                          1418  drawTinyEnemyProjectileRight
002DC758  41F9 002A7976           1419      lea     smallBeam, a0
002DC75E                          1420      
002DC75E                          1421  
002DC75E                          1422      
002DC75E                          1423  drawEnemyProjectileRight
002DC75E  2238 151A               1424      move.l  EnemyProjectileWidth, d1
002DC762  2438 151E               1425      move.l  EnemyProjectileHeight, d2
002DC766  21F8 14E2 1522          1426      move.l  EnemyX, EnemyProjectileX
002DC76C  2038 1522               1427      move.l  EnemyProjectileX, d0
002DC770  D0B8 14DA               1428      add.l   EnemyWidth, d0
002DC774  21C0 1522               1429      move.l  d0, EnemyProjectileX
002DC778  2638 1522               1430      move.l  EnemyProjectileX, d3
002DC77C  2838 14E6               1431      move.l  EnemyY, d4
002DC780  E88C                    1432      lsr.l   #4, d4
002DC782  21C4 1526               1433      move.l  d4, EnemyProjectileY
002DC786  2A38 152A               1434      move.l  EnemyProjectileYOffset,d5
002DC78A  DBB8 1526               1435      add.l   d5, EnemyProjectileY
002DC78E  2838 1526               1436      move.l  EnemyProjectileY, d4
002DC792  21F8 151A 152E          1437      move.l  EnemyProjectileWidth, EnemyProjectileChunkX
002DC798  2A38 152E               1438      move.l  EnemyProjectileChunkX, d5
002DC79C  2C38 1532               1439      move.l  EnemyProjectileChunkY, d6
002DC7A0  4EB9 002DC1DA           1440      jsr     DRAWIMAGE
002DC7A6  4E75                    1441      rts
002DC7A8                          1442  spawnEnemyProjectileLeft
002DC7A8  21FC 00000001 1516      1443      move.l  #1, EnemyProjectileLeft
002DC7B0  2038 14EE               1444      move.l  EnemyChunkY, d0
002DC7B4  0C80 00000000           1445      cmpi.l  #0, d0
002DC7BA  6700 0006               1446      BEQ     drawTinyEnemyProjectileLeft
002DC7BE                          1447      
002DC7BE                          1448      
002DC7BE                          1449      
002DC7BE  6000 0008               1450      BRA     drawEnemyProjectileLeft
002DC7C2                          1451      
002DC7C2                          1452      
002DC7C2                          1453      
002DC7C2                          1454  drawTinyEnemyProjectileLeft
002DC7C2  41F9 002A7976           1455      lea     smallBeam, a0
002DC7C8                          1456   
002DC7C8                          1457  
002DC7C8                          1458  drawEnemyProjectileLeft
002DC7C8  2238 151A               1459      move.l  EnemyProjectileWidth, d1
002DC7CC  2438 151E               1460      move.l  EnemyProjectileHeight, d2
002DC7D0  21F8 14E2 1522          1461      move.l  EnemyX, EnemyProjectileX
002DC7D6  2038 1522               1462      move.l  EnemyProjectileX, d0
002DC7DA  90B8 151A               1463      sub.l   EnemyProjectileWidth, d0
002DC7DE  21C0 1522               1464      move.l  d0, EnemyProjectileX
002DC7E2  2638 1522               1465      move.l  EnemyProjectileX, d3
002DC7E6  2838 14E6               1466      move.l  EnemyY, d4
002DC7EA  E88C                    1467      lsr.l   #FRAC_BITS, d4
002DC7EC  21C4 1526               1468      move.l  d4, EnemyProjectileY
002DC7F0  2A38 152A               1469      move.l  EnemyProjectileYOffset,d5
002DC7F4  DBB8 1526               1470      add.l   d5, EnemyProjectileY
002DC7F8  2838 1526               1471      move.l  EnemyProjectileY, d4
002DC7FC  21FC 00000000 152E      1472      move.l  #0, EnemyProjectileChunkX
002DC804  2A38 152E               1473      move.l  EnemyProjectileChunkX, d5
002DC808  2C38 1532               1474      move.l  EnemyProjectileChunkY, d6
002DC80C  4EB9 002DC1DA           1475      jsr     DRAWIMAGE
002DC812  4E75                    1476      rts
002DC814                          1477  
002DC814                          1478      
002DC814                          1479      
002DC814                          1480  updateProjectilesBackground
002DC814  2038 1512               1481      move.l  EnemyProjectileActive, d0
002DC818  0C80 00000001           1482      cmpi.l  #1, d0
002DC81E  6600 00FC               1483      BNE     exitProjectileUpdate
002DC822                          1484  
002DC822  41F8 1586               1485      lea     BackGround, a0
002DC826  2238 151A               1486      move.l  EnemyProjectileWidth, d1
002DC82A  2438 151E               1487      move.l  EnemyProjectileHeight, d2
002DC82E  2638 1522               1488      move.l  EnemyProjectileX, d3
002DC832  2838 1526               1489      move.l  EnemyProjectileY, d4
002DC836  2A38 1522               1490      move.l  EnemyProjectileX, d5
002DC83A  2C38 1526               1491      move.l  EnemyProjectileY, d6
002DC83E  4EB9 002DC1DA           1492      jsr     DRAWIMAGE
002DC844                          1493      
002DC844  2038 1512               1494      move.l  EnemyProjectileActive, d0
002DC848  0C80 00000001           1495      cmpi.l  #1, d0
002DC84E  6600 00CC               1496      BNE     exitProjectileUpdate
002DC852                          1497  
002DC852  2038 1516               1498      move.l  EnemyProjectileLeft, d0
002DC856  0C80 00000001           1499      cmpi.l  #1, d0
002DC85C  6600 0062               1500      BNE     updateProjectile2PositionRight
002DC860                          1501  
002DC860                          1502  updateProjectile2PositionLeft
002DC860                          1503      
002DC860                          1504      
002DC860  2038 1522               1505      move.l  EnemyProjectileX, d0
002DC864  90B8 1542               1506      sub.l   ProjectileSpeed, d0
002DC868  21C0 1522               1507      move.l  d0, EnemyProjectileX
002DC86C                          1508  
002DC86C  2038 1522               1509      move.l  EnemyProjectileX, d0
002DC870  D0B8 151A               1510      add.l   EnemyProjectileWidth, d0
002DC874  0C80 00000000           1511      cmpi.l  #0, d0
002DC87A  6E00 0066               1512      BGT     moveProjectile2Right
002DC87E                          1513      
002DC87E  21FC 00000000 1512      1514      move.l  #0, EnemyProjectileActive
002DC886                          1515  
002DC886                          1516  moveProjectile2Left
002DC886  2038 14EE               1517      move.l  EnemyChunkY, d0
002DC88A  0C80 00000000           1518      cmpi.l  #0, d0
002DC890  6700 0006               1519      BEQ     updateTinyEnemyProjectileLeft
002DC894                          1520      
002DC894                          1521  
002DC894  6000 0008               1522      BRA     updateDrawProjectile2Left
002DC898                          1523      
002DC898                          1524  updateTinyEnemyProjectileLeft
002DC898  41F9 002A7976           1525      lea     smallBeam, a0
002DC89E                          1526  
002DC89E                          1527  updateDrawProjectile2Left
002DC89E  2238 151A               1528      move.l  EnemyProjectileWidth, d1
002DC8A2  2438 151E               1529      move.l  EnemyProjectileHeight, d2
002DC8A6  2638 1522               1530      move.l  EnemyProjectileX, d3
002DC8AA  2838 1526               1531      move.l  EnemyProjectileY, d4
002DC8AE  2A38 152E               1532      move.l  EnemyProjectileChunkX, d5
002DC8B2  2C38 1532               1533      move.l  EnemyProjectileChunkY, d6
002DC8B6  4EB9 002DC1DA           1534      jsr     DRAWIMAGE
002DC8BC                          1535      
002DC8BC  6000 005E               1536      BRA     exitProjectileUpdate
002DC8C0                          1537      
002DC8C0                          1538  updateProjectile2PositionRight   
002DC8C0  2038 1522               1539      move.l  EnemyProjectileX, d0
002DC8C4  D0B8 1542               1540      add.l   ProjectileSpeed, d0
002DC8C8  21C0 1522               1541      move.l  d0, EnemyProjectileX
002DC8CC                          1542  
002DC8CC  2038 1522               1543      move.l  EnemyProjectileX, d0
002DC8D0  0C80 000002BC           1544      cmpi.l  #700, d0
002DC8D6  6D00 000A               1545      BLT     moveProjectile2Right
002DC8DA                          1546      
002DC8DA  21FC 00000000 1512      1547      move.l  #0, EnemyProjectileActive
002DC8E2                          1548  
002DC8E2                          1549  moveProjectile2Right
002DC8E2  2038 14EE               1550      move.l  EnemyChunkY, d0
002DC8E6  0C80 00000000           1551      cmpi.l  #0, d0
002DC8EC  6700 0006               1552      BEQ     updateTinyEnemyProjectileRight
002DC8F0                          1553      
002DC8F0                          1554  
002DC8F0  6000 0008               1555      BRA     updateDrawProjectile2Right
002DC8F4                          1556      
002DC8F4                          1557  updateTinyEnemyProjectileRight
002DC8F4  41F9 002A7976           1558      lea     smallBeam, a0
002DC8FA                          1559  
002DC8FA                          1560  updateDrawProjectile2Right
002DC8FA  2238 151A               1561      move.l  EnemyProjectileWidth, d1
002DC8FE  2438 151E               1562      move.l  EnemyProjectileHeight, d2
002DC902  2638 1522               1563      move.l  EnemyProjectileX, d3
002DC906  2838 1526               1564      move.l  EnemyProjectileY, d4
002DC90A  2A38 152E               1565      move.l  EnemyProjectileChunkX, d5
002DC90E  2C38 1532               1566      move.l  EnemyProjectileChunkY, d6
002DC912  4EB9 002DC1DA           1567      jsr     DRAWIMAGE
002DC918                          1568      
002DC918  6000 0002               1569      BRA     exitProjectileUpdate
002DC91C                          1570      
002DC91C                          1571      
002DC91C                          1572      
002DC91C                          1573  exitProjectileUpdate
002DC91C  4E75                    1574      rts
002DC91E                          1575  
002DC91E                          1576   
002DC91E                          1577  
002DC91E                          1578  
002DC91E                          1579  
002DC91E                          1580  
002DC91E                          1581  
002DC91E                          1582  
002DC91E                          1583  
002DC91E                          1584  
002DC91E                          1585  
002DC91E                          1586  
002DC91E                          1587  
002DC91E                          1588  
002DC91E                          1589  
002DC91E                          1590  
002DC91E                          1591  
002DC91E                          1592  -------------------- end include --------------------
002DC91E                          1593   include "EnemyProjectileCollide.X68"
002DC91E                          1594  CheckProjectileCollision
002DC91E                          1595  
002DC91E                          1596  EnemyBeamCollisionDetection
002DC91E                          1597      *Make sure that the projectile is active, otherwise check the next collision detection
002DC91E  0C81 00000001           1598      cmpi.l  #1, d1
002DC924  6600 0032               1599      BNE     RunnerBeamCollisionDetection
002DC928                          1600  
002DC928  2238 14E2               1601      move.l  EnemyX, d1
002DC92C  2438 14E6               1602      move.l  EnemyY, d2
002DC930                          1603      *shift remainder bits out of player Y to calculate in the same base
002DC930  E88A                    1604      lsr.l   #FRAC_BITS, d2
002DC932                          1605  
002DC932                          1606  
002DC932                          1607      
002DC932                          1608      *Compare all four sides of projectile with player 2
002DC932  D2B8 14DA               1609      add.l   EnemyWidth, d1 
002DC936  B641                    1610      cmp     d1, d3
002DC938  6E00 001E               1611      BGT     RunnerBeamCollisionDetection
002DC93C                          1612      
002DC93C  92B8 14DA               1613      sub.l   EnemyWidth, d1
002DC940                          1614  
002DC940  B641                    1615      cmp     d1, d3
002DC942  6DDA                    1616      BLT     EnemyBeamCollisionDetection
002DC944                          1617      
002DC944  D4B8 14DE               1618      add.l   EnemyHeight, d2
002DC948  B842                    1619      cmp     d2, d4
002DC94A  6E00 000C               1620      BGT     RunnerBeamCollisionDetection
002DC94E                          1621      
002DC94E  94B8 14DE               1622      sub.l   EnemyHeight, d2
002DC952                          1623  
002DC952  B842                    1624      cmp     d2, d4
002DC954  6D00 0002               1625      BLT     RunnerBeamCollisionDetection
002DC958                          1626      *if all checks fail, then collision has occured
002DC958                          1627  
002DC958                          1628  
002DC958                          1629  RunnerBeamCollisionDetection
002DC958  2238 1512               1630      move.l  EnemyProjectileActive, d1
002DC95C  0C81 00000001           1631      cmpi.l  #1, d1
002DC962  6600 004A               1632      BNE     BeamToBeamCollisionDetection
002DC966                          1633  
002DC966  2238 14A4               1634      move.l  RunnerX, d1
002DC96A  2438 14A8               1635      move.l  RunnerY, d2
002DC96E  E88A                    1636      lsr.l   #FRAC_BITS, d2
002DC970  2638 1522               1637      move.l  EnemyProjectileX, d3
002DC974  2838 1526               1638      move.l  EnemyProjectileY, d4
002DC978                          1639      
002DC978  D2B8 149C               1640      add.l   RunnerWidth, d1 
002DC97C  B641                    1641      cmp     d1, d3
002DC97E  6E00 002E               1642      BGT     BeamToBeamCollisionDetection
002DC982                          1643      
002DC982  92B8 149C               1644      sub.l   RunnerWidth, d1
002DC986  D6B8 151A               1645      add.l   EnemyProjectileWidth, d3
002DC98A  B641                    1646      cmp     d1, d3
002DC98C  6D00 0020               1647      BLT     BeamToBeamCollisionDetection
002DC990                          1648      
002DC990  D4B8 14A0               1649      add.l   RunnerHeight, d2
002DC994  B842                    1650      cmp     d2, d4
002DC996  6E00 0016               1651      BGT     BeamToBeamCollisionDetection
002DC99A                          1652      
002DC99A  94B8 14A0               1653      sub.l   RunnerHeight, d2
002DC99E  D8B8 151E               1654      add.l   EnemyProjectileHeight, d4
002DC9A2  B842                    1655      cmp     d2, d4
002DC9A4  6D00 0008               1656      BLT     BeamToBeamCollisionDetection
002DC9A8  4EB9 002DC9F2           1657      jsr     BeamHitRunner
002DC9AE                          1658  
002DC9AE                          1659  BeamToBeamCollisionDetection
002DC9AE  2238 1512               1660      move.l  EnemyProjectileActive, d1
002DC9B2  0C81 00000001           1661      cmpi.l  #1, d1
002DC9B8  6600 00E6               1662      BNE     exitBeamCollisionDetection
002DC9BC                          1663      
002DC9BC                          1664  
002DC9BC  0C81 00000001           1665      cmpi.l  #1, d1
002DC9C2  6600 00DC               1666      BNE     exitBeamCollisionDetection
002DC9C6                          1667  
002DC9C6                          1668  
002DC9C6                          1669  
002DC9C6  2638 1522               1670      move.l  EnemyProjectileX, d3
002DC9CA  2838 1526               1671      move.l  EnemyProjectileY, d4
002DC9CE                          1672      
002DC9CE                          1673  
002DC9CE  B641                    1674      cmp     d1, d3
002DC9D0  6E00 00CE               1675      BGT     exitBeamCollisionDetection
002DC9D4                          1676      
002DC9D4                          1677  
002DC9D4  D6B8 151A               1678      add.l   EnemyProjectileWidth, d3
002DC9D8  B641                    1679      cmp     d1, d3
002DC9DA  6D00 00C4               1680      BLT     exitBeamCollisionDetection
002DC9DE                          1681      
002DC9DE                          1682  
002DC9DE  B842                    1683      cmp     d2, d4
002DC9E0  6E00 00BE               1684      BGT     exitBeamCollisionDetection
002DC9E4                          1685      
002DC9E4                          1686  
002DC9E4  D8B8 151E               1687      add.l   EnemyProjectileHeight, d4
002DC9E8  B842                    1688      cmp     d2, d4
002DC9EA  6D00 00B4               1689      BLT     exitBeamCollisionDetection    
002DC9EE  6000 0070               1690      BRA     BeamsCollided
002DC9F2                          1691  
002DC9F2                          1692  BeamHitRunner
002DC9F2                          1693      *Player 1 has been hit.  Subtract the beam damage from health
002DC9F2  2238 14BC               1694      move.l  RunnerHealth, d1
002DC9F6  92B8 1536               1695      sub.l   EnemyProjectileDamage, d1
002DC9FA                          1696      *Check if player health is below 0
002DC9FA  0C81 00000000           1697      cmpi.l  #0, d1
002DCA00  6C00 0008               1698      BGE     ContinueBeamHitRunner
002DCA04                          1699      * if it is, set health to 0
002DCA04  4EB9 002DCAA2           1700      jsr     SetHealthToZero
002DCA0A                          1701  ContinueBeamHitRunner  
002DCA0A  21C1 14BC               1702      move.l  d1, RunnerHealth
002DCA0E  21F8 14D4 14AC          1703      move.l  RunnerDamageSprite, RunnerChunkX    
002DCA14  21FC 00000000 1512      1704      move.l  #0, EnemyProjectileActive
002DCA1C                          1705      
002DCA1C                          1706      *draw background behind player
002DCA1C  41F8 1586               1707      lea     BackGround, a0
002DCA20  2238 151A               1708      move.l  EnemyProjectileWidth, d1
002DCA24  2438 151E               1709      move.l  EnemyProjectileHeight, d2
002DCA28  2638 1522               1710      move.l  EnemyProjectileX, d3
002DCA2C  2838 1526               1711      move.l  EnemyProjectileY, d4
002DCA30  2A38 1522               1712      move.l  EnemyProjectileX, d5
002DCA34  2C38 1526               1713      move.l  EnemyProjectileY, d6
002DCA38  4EB9 002DC1DA           1714      jsr     DRAWIMAGE
002DCA3E                          1715      *draw updated score for players
002DCA3E  4EB8 13FA               1716      jsr     updateScoreBackGround
002DCA42  2038 14BC               1717      move.l  RunnerHealth, d0
002DCA46  2A38 14D0               1718      move.l  RunnerScoreX, d5
002DCA4A  4EB9 002DC5BE           1719      jsr     updateHealth
002DCA50                          1720     
002DCA50                          1721      
002DCA50                          1722      *spawn sound of player that was hit
002DCA50  43F8 157A               1723      lea     GetHit, a1
002DCA54  7200                    1724      move.l  #0,d1
002DCA56  7400                    1725      move.l  #0,d2
002DCA58  7049                    1726      move.l  #73,d0
002DCA5A  4E4F                    1727      Trap    #15
002DCA5C                          1728      
002DCA5C  6000 0042               1729      bra     exitBeamCollisionDetection
002DCA60                          1730  
002DCA60                          1731  
002DCA60                          1732  BeamsCollided
002DCA60                          1733  
002DCA60                          1734      
002DCA60  41F8 1586               1735      lea     BackGround, a0
002DCA64                          1736  
002DCA64                          1737  
002DCA64                          1738  
002DCA64                          1739  
002DCA64                          1740  
002DCA64                          1741  
002DCA64  4EB9 002DC1DA           1742      jsr     DRAWIMAGE
002DCA6A                          1743      
002DCA6A  21FC 00000000 1512      1744      move.l  #0, EnemyProjectileActive
002DCA72                          1745      
002DCA72  41F8 1586               1746      lea     BackGround, a0
002DCA76  2238 151A               1747      move.l  EnemyProjectileWidth, d1
002DCA7A  2438 151E               1748      move.l  EnemyProjectileHeight, d2
002DCA7E  2638 1522               1749      move.l  EnemyProjectileX, d3
002DCA82  2838 1526               1750      move.l  EnemyProjectileY, d4
002DCA86  2A38 1522               1751      move.l  EnemyProjectileX, d5
002DCA8A  2C38 1526               1752      move.l  EnemyProjectileY, d6
002DCA8E  4EB9 002DC1DA           1753      jsr     DRAWIMAGE
002DCA94                          1754      
002DCA94                          1755  COLLISION_CHECK_DONE:               ; No Collision Update points
002DCA94  5201                    1756      ADD.B   #POINTS,    D1          ; Move points upgrade to D1
002DCA96  D2B8 14D8               1757      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
002DCA9A  21C1 14D8               1758      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
002DCA9E  4E75                    1759      RTS                             ; Return to subrouti
002DCAA0                          1760      
002DCAA0                          1761  exitBeamCollisionDetection
002DCAA0  4E75                    1762      rts
002DCAA2                          1763      
002DCAA2                          1764  SetHealthToZero
002DCAA2  7200                    1765      move.l  #0, d1
002DCAA4  4E75                    1766      rts
002DCAA6                          1767  
002DCAA6                          1768  
002DCAA6                          1769  
002DCAA6                          1770  
002DCAA6                          1771  
002DCAA6                          1772  
002DCAA6                          1773  
002DCAA6                          1774  
002DCAA6                          1775  
002DCAA6                          1776  
002DCAA6                          1777  
002DCAA6                          1778  
002DCAA6                          1779  
002DCAA6                          1780  
002DCAA6                          1781  
002DCAA6                          1782  
002DCAA6                          1783  
002DCAA6                          1784  
002DCAA6                          1785  
002DCAA6                          1786  
002DCAA6                          1787  -------------------- end include --------------------
002DCAA6                          1788   include "RunnerGravity.X68"
002DCAA6                          1789  
002DCAA6                          1790  updateRunnerGravity
002DCAA6  4EB9 002DCABA           1791          jsr     RunnerGravityRoutine
002DCAAC  4EB9 002DCB18           1792          jsr     checkForRunnerGround
002DCAB2  4EB9 002DCB54           1793          jsr     checkForEnemyGround
002DCAB8  4E75                    1794          rts
002DCABA                          1795  
002DCABA                          1796  RunnerGravityRoutine
002DCABA  103C 0013               1797          move.b          #GET_KEY_INPUT_COMMAND,d0
002DCABE  7220                    1798          move.l          #SPACE_KEY,d1
002DCAC0  4E4F                    1799          TRAP            #15
002DCAC2  0C01 0000               1800          cmpi.b          #0,d1
002DCAC6  6600 008A               1801          bne             exitGravity
002DCACA  2A38 14B8               1802          move.l          RunnerJumping, d5
002DCACE  0C85 00000001           1803          cmpi.l          #1, d5
002DCAD4  103C 0013               1804          move.b          #GET_KEY_INPUT_COMMAND,d0
002DCAD8  7241                    1805          move.l          #$41,d1
002DCADA  4E4F                    1806          TRAP            #15
002DCADC  0C01 0000               1807          cmpi.b          #0,d1
002DCAE0  6600 0018               1808          bne             applyRunnerGravity
002DCAE4                          1809          
002DCAE4  103C 0013               1810          move.b          #GET_KEY_INPUT_COMMAND,d0
002DCAE8  7244                    1811          move.l          #$44,d1
002DCAEA  4E4F                    1812          TRAP            #15
002DCAEC  0C01 0000               1813          cmpi.b          #0,d1
002DCAF0  6600 0008               1814          bne             applyRunnerGravity
002DCAF4                          1815          
002DCAF4  21F8 14C8 14AC          1816          move.l          RunnerJumpSprite, RunnerChunkX
002DCAFA                          1817  
002DCAFA                          1818  applyRunnerGravity
002DCAFA  2038 14CC               1819          move.l          RunnerVelocity, d0
002DCAFE  223C 0000009C           1820          move.l          #Gravity, d1
002DCB04  D081                    1821          add.l           d1, d0
002DCB06  21C0 14CC               1822          move.l          d0, RunnerVelocity        
002DCB0A  2838 14A8               1823          move.l          RunnerY, d4
002DCB0E  D8B8 14CC               1824          add.l           RunnerVelocity, d4
002DCB12  21C4 14A8               1825          move.l          d4, RunnerY
002DCB16  4E75                    1826          rts
002DCB18                          1827  checkForRunnerGround
002DCB18                          1828  
002DCB18  2838 14A8               1829      move.l  RunnerY, d4
002DCB1C  D8B8 14CC               1830      add.l   RunnerVelocity, d4
002DCB20                          1831  
002DCB20  E84C                    1832      lsr     #FRAC_BITS, d4
002DCB22  2A38 153E               1833      move.l  Ground, d5
002DCB26  B845                    1834      cmp     d5, d4
002DCB28  6E00 0004               1835      BGT     setRunnerGround     
002DCB2C                          1836      
002DCB2C                          1837  returnRunnerGround    
002DCB2C  4E75                    1838      rts
002DCB2E                          1839  
002DCB2E                          1840  setRunnerGround
002DCB2E  21FC 00000000 14CC      1841      move.l  #0, RunnerVelocity
002DCB36  21F8 14C4 14AC          1842      move.l  RunnerIdleSprite, RunnerChunkX
002DCB3C  4EB8 1390               1843      jsr     updatePlayersBackGrounds
002DCB40  2838 153E               1844      move.l  Ground, d4
002DCB44  E94C                    1845      lsl     #FRAC_BITS, d4
002DCB46  21C4 14A8               1846      move.l  d4, RunnerY
002DCB4A  21FC 00000000 14B8      1847      move.l  #0, RunnerJumping       
002DCB52                          1848          
002DCB52                          1849  
002DCB52                          1850  exitGravity
002DCB52  4E75                    1851          rts
002DCB54                          1852  
002DCB54                          1853  checkForEnemyGround
002DCB54  2838 14E6               1854      move.l  EnemyY, d4
002DCB58  D8B8 153A               1855      add.l   EnemyVelocity, d4
002DCB5C  E84C                    1856      lsr     #FRAC_BITS, d4
002DCB5E  2A38 153E               1857      move.l  Ground, d5
002DCB62                          1858  
002DCB62  5B85                    1859      sub.l   #5, d5
002DCB64  B845                    1860      cmp     d5, d4
002DCB66  6E00 0004               1861      BGT     setEnemyGround     
002DCB6A                          1862  
002DCB6A                          1863  returnEnemyGround    
002DCB6A  4E75                    1864      rts
002DCB6C                          1865      
002DCB6C                          1866  setEnemyGround
002DCB6C  21FC 00000000 153A      1867      move.l  #0, EnemyVelocity
002DCB74  21F8 1502 14EA          1868      move.l  EnemyIdleSprite, EnemyChunkX
002DCB7A  4EB8 1390               1869      jsr     updatePlayersBackGrounds
002DCB7E  2838 153E               1870      move.l  Ground, d4
002DCB82  0484 0000000A           1871      sub.l   #10, d4
002DCB88  E94C                    1872      lsl     #FRAC_BITS, d4
002DCB8A  21C4 14E6               1873      move.l  d4, EnemyY
002DCB8E                          1874  
002DCB8E                          1875      
002DCB8E                          1876  
002DCB8E  7200                    1877      move.l  #0,d1
002DCB90  7400                    1878      move.l  #0,d2
002DCB92  7049                    1879      move.l  #73,d0
002DCB94  4E4F                    1880      Trap    #15
002DCB96                          1881      
002DCB96  60D2                    1882      bra     returnEnemyGround
002DCB98                          1883  
002DCB98                          1884  -------------------- end include --------------------
002DCB98                          1885      
002DCB98                          1886     
002DCB98                          1887  
002DCB98                          1888  QUIT
002DCB98                          1889      END    START  

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACCOUNTFORPADDING   2DC228
ADIGITROUTINE       2DC6CC
ALL_REG             7FFF
APPLYRUNNERGRAVITY  2DCAFA
BACKGROUND          1586
BDIGITROUTINE       2DC6A4
BEAMHITRUNNER       2DC9F2
BEAMSCOLLIDED       2DCA60
BEAMTOBEAMCOLLISIONDETECTION  2DC9AE
CALLFUNCTION        2DC28A
CDIGITROUTINE       2DC67C
CHECKFORENEMYGROUND  2DCB54
CHECKFORRUNNERGROUND  2DCB18
CHECKPROJECTILECOLLISION  2DC91E
COLLISION_CHECK_DONE  2DCA94
CONTINUEBEAMHITRUNNER  2DCA0A
DDIGITROUTINE       2DC654
DEADRUNNER          2DAF06
DOWNROUTINE         2DC324
DRAWCHUNK           2DC10C
DRAWDIGITPOSITION   2DC6F8
DRAWENEMYCALL       133E
DRAWENEMYPROJECTILELEFT  2DC7C8
DRAWENEMYPROJECTILERIGHT  2DC75E
DRAWIMAGE           2DC1DA
DRAWPIXEL           2DC1C0
DRAWPIXELCODE       52
DRAWPLAYERS         1430
DRAWRUNNERCALL      130A
DRAWRUNNERHEALTH    1372
DRAWTINYENEMYPROJECTILELEFT  2DC7C2
DRAWTINYENEMYPROJECTILERIGHT  2DC758
EDIGITROUTINE       2DC62C
EIGHTDIGIT          2DC720
ENDGAME             2A7A80
ENDROUTINE          2DC1D8
ENEMY               28E6DA
ENEMYBEAMCOLLISIONDETECTION  2DC91E
ENEMYBEAMPRESSED    2DC5BA
ENEMYBEAMSPRITE     150A
ENEMYCHUNKX         14EA
ENEMYCHUNKY         14EE
ENEMYDAMAGESPRITE   150E
ENEMYHEALTH         14FA
ENEMYHEIGHT         14DE
ENEMYIDLESPRITE     1502
ENEMYJUMPING        14F6
ENEMYJUMPSPRITE     1506
ENEMYLEFT           14FE
ENEMYPROJECTILEACTIVE  1512
ENEMYPROJECTILECHUNKX  152E
ENEMYPROJECTILECHUNKY  1532
ENEMYPROJECTILEDAMAGE  1536
ENEMYPROJECTILEHEIGHT  151E
ENEMYPROJECTILELEFT  1516
ENEMYPROJECTILEWIDTH  151A
ENEMYPROJECTILEX    1522
ENEMYPROJECTILEY    1526
ENEMYPROJECTILEYOFFSET  152A
ENEMYSPEED          14F2
ENEMYSTARTSPRITEX   81
ENEMYVELOCITY       153A
ENEMYWIDTH          14DA
ENEMYX              14E2
ENEMYY              14E6
EXITBEAMCOLLISIONDETECTION  2DCAA0
EXITGRAVITY         2DCB52
EXITPROJECTILEUPDATE  2DC91C
FDIGITROUTINE       2DC604
FINISHHEALTH        2DC6FE
FIVEDIGIT           2DC714
FOURDIGIT           2DC710
FRAC_BITS           4
FUNCTIONTABLE       2DC4CA
GAMELOOP            11F0
GAMEOVER            156A
GAMEOVER0           1264
GAMEOVERLOOP        12EE
GDIGITROUTINE       2DC5DE
GETHIT              157A
GET_KEY_INPUT_COMMAND  13
GET_USER_INPUT_COMMAND  13
GRAVITY             9C
GROUND              153E
INCREMENT           2DC17E
INCREMENTY          2DC1B2
INITRUNNERINPUT     2DC252
INNERLOOP           2DC150
INPUTLOOP           2DC254
JUMPLOOP            2DC2CE
LEFTROUTINE         2DC306
LOADINGIMAGE        134FF0
MOVEPROJECTILE2LEFT  2DC886
MOVEPROJECTILE2RIGHT  2DC8E2
NINEDIGIT           2DC724
NOCALL              2DC26C
NOFUNCPTR           2DC2AE
ONEDIGIT            2DC704
OUTERLOOP           2DC142
PADDING             2DC24E
PENCOLORCODE        50
PLAYER_SCORE        14D8
POINTS              1
POWERUPSQUARELENGTH  34
PROJECTILESPEED     1542
QUIT                2DCB98
RESETVARIABLES      105A
RETURNENEMYGROUND   2DCB6A
RETURNRUNNERGROUND  2DCB2C
RIGHTROUTINE        2DC31A
ROUTINE0            2DC32E
ROUTINE1            2DC338
ROUTINE2            2DC342
ROUTINE3            2DC34C
ROUTINE4            2DC356
ROUTINE5            2DC360
ROUTINE6            2DC36A
ROUTINE7            2DC374
ROUTINE8            2DC37E
ROUTINE9            2DC388
ROUTINEA            2DC392
ROUTINEB            2DC39C
ROUTINEC            2DC3A6
ROUTINED            2DC3B0
ROUTINEE            2DC3BA
ROUTINEF            2DC3C4
ROUTINEG            2DC3CE
ROUTINEH            2DC3D8
ROUTINEI            2DC3E2
ROUTINEJ            2DC3EC
ROUTINEK            2DC3F6
ROUTINEL            2DC400
ROUTINEM            2DC40A
ROUTINEN            2DC414
ROUTINEO            2DC41E
ROUTINEOEXIT        2DC45A
ROUTINEP            2DC45C
ROUTINEQ            2DC466
ROUTINER            2DC470
ROUTINES            2DC47A
ROUTINET            2DC484
ROUTINEU            2DC48E
ROUTINEV            2DC498
ROUTINEW            2DC4A2
ROUTINEX            2DC4AC
ROUTINEY            2DC4B6
ROUTINEZ            2DC4C0
RUNNER              27C9A4
RUNNERBEAMCOLLISIONDETECTION  2DC958
RUNNERBEAMPRESSED   2DC5B6
RUNNERCHUNKX        14AC
RUNNERCHUNKY        14B0
RUNNERDAMAGESPRITE  14D4
RUNNERGRAVITYROUTINE  2DCABA
RUNNERHEALTH        14BC
RUNNERHEALTHIMAGE   2A0410
RUNNERHEIGHT        14A0
RUNNERIDLESPRITE    14C4
RUNNERJUMPING       14B8
RUNNERJUMPSPRITE    14C8
RUNNERLEFT          14C0
RUNNERSCOREX        14D0
RUNNERSPEED         14B4
RUNNERSTARTSPRITEX  A0
RUNNERVELOCITY      14CC
RUNNERWIDTH         149C
RUNNERX             14A4
RUNNERY             14A8
RUNNINGMUSIC        155A
RUNPROGRAM          2DC230
SCREENCHANGECODE    21
SETENEMYGROUND      2DCB6C
SETHEALTHTOZERO     2DCAA2
SETRUNNERGROUND     2DCB2E
SEVENDIGIT          2DC71C
SIXDIGIT            2DC718
SMALLBEAM           2A7976
SPACEROUTINE        2DC2B4
SPACEROUTINEEXIT    2DC304
SPACE_KEY           20
SPAWNENEMYPROJECTILE  2DC728
SPAWNENEMYPROJECTILELEFT  2DC7A8
SPAWNENEMYPROJECTILERIGHT  2DC73E
START               1000
THREEDIGIT          2DC70C
TITLELOOP           11C6
TITLEMUSIC          1546
TITLESCREEN         148F3A
TWODIGIT            2DC708
UPDATEDRAWPROJECTILE2LEFT  2DC89E
UPDATEDRAWPROJECTILE2RIGHT  2DC8FA
UPDATEHEALTH        2DC5BE
UPDATEPLAYERSBACKGROUNDS  1390
UPDATEPROJECTILE2POSITIONLEFT  2DC860
UPDATEPROJECTILE2POSITIONRIGHT  2DC8C0
UPDATEPROJECTILESBACKGROUND  2DC814
UPDATEPROJECTILESBACKGROUNDS  1302
UPDATERUNNERGRAVITY  2DCAA6
UPDATESCOREBACKGROUND  13FA
UPDATETINYENEMYPROJECTILELEFT  2DC898
UPDATETINYENEMYPROJECTILERIGHT  2DC8F4
UPROUTINE           2DC310
ZERODIGIT           2DC700
